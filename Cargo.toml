[workspace.package]
edition = "2021"
version = "0.1.0"
authors = ["Your Name <your.email@example.com>"] # Placeholder, adjust as needed
homepage = "https://example.com/your-project" # Placeholder, adjust as needed
keywords = ["rust", "minizinc", "llm"] # Placeholder, adjust as needed
license = "MIT"
repository = "https://github.com/meta-introspector/minizinc-introspector"

[workspace]
resolver = "3"
members = [
    "tools/minizinc_ffi",
    "tools/coverage_extractor",
    "crates/zos-bootstrap",
        "crates/constant_analyzer",
    "crates/constant_analyzer_macros",
    "crates/minizinc_introspector", # needs clang
    "crates/minizinc_macro",
    "crates/minizinc_macro_test",
    "doc_organizer",
    "doc_to_minizinc_data",
    "embedding_analyzer",
    "zos-bootstrap-main",
    "crates/minizinc_output_parser",
    "rust_lattice_project",
    "crates/rust_file_finder",
    "crates/vibe_analyzer",
    #    "crates/zos-fast-query",
    "crates/ragit-string-utils",
    # "crates/vocabulary_dfa_generator",
    # "crates/vocabulary_dfa_lib",
    # "crates/dfa_tester",
    "crates/backpack_tool", "crates/code_search_tool",
    #    "vendor/hugging-face-dataset-validator-rust",
    "temp_parquet_inspector",
    "crates/poem_formatter",
    "crates/meme_site_generator",
#    "crates/fix_meme_yaml",
    "vendor/grex",
    "crates/poem_meme_formatter",
    "crates/regex_generator_tool",
#    "crates/poem_yaml_fixer",
    "crates/poem_macros",
    "crates/poem_macro_impl",
    "crates/poem_macro_impl_test", "crates/poem_macro_test_crate", "crates/poem_traits", "crates/poem_archeologist",
    #"crates/poem_fixer_orchestrator",
    "regex_extractor", "crates/asciicast_processor", 
    "crates/gemini_utils", "crates/gemini_utils_test", "crates/kantspel_macros", #    "git_diff_analyzer",
        "crates/regex_file_analyzer",
    "crates/mini-act",
    "crates/launchpad",
    "crates/zos-stage-session-manager",
    "crates/zos-stage-process-monitor",
    "crates/zos-stage-github-repo-inspector",
    "crates/zos-stage-doh",
    "crates/tmux_controller",
    "crates/credential_manager", "crates/gemini_cli_manager", "crates/crq_updater", "crates/launchpad_status",
    "crates/dump_tmux_status", # New crate for dumping tmux status
    "vendor/solfunmeme-banner",
]

[patch.crates-io]
hf-dataset-validator = { path = "vendor/hugging-face-dataset-validator-rust" }
arrow-arith = { path = "vendor/arrow-arith-patched" }
octocrab = { path = "vendor/octocrab" }
#tree-sitter = { path = "vendor/tree-sitter/lib" }
rust-code-analysis = { path = "vendor/rust-code-analysis" }
tree-sitter = { path = "vendor/tree-sitter/lib" }



[workspace.lints.clippy]
dbg_macro = "deny"
todo = "deny"
pedantic = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }

# The lints below are a specific subset of the pedantic+nursery lints
# that we explicitly allow in the tree-sitter codebase because they either:
#
# 1. Contain false positives,
# 2. Are unnecessary, or
# 3. Worsen the code
#
branches_sharing_code = "allow"
cast_lossless = "allow"
cast_possible_truncation = "allow"
cast_possible_wrap = "allow"
cast_precision_loss = "allow"
cast_sign_loss = "allow"
checked_conversions = "allow"
cognitive_complexity = "allow"
collection_is_never_read = "allow"
fallible_impl_from = "allow"
fn_params_excessive_bools = "allow"
inline_always = "allow"
if_not_else = "allow"
items_after_statements = "allow"
match_wildcard_for_single_variants = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"
module_name_repetitions = "allow"
multiple_crate_versions = "allow"
needless_for_each = "allow"
obfuscated_if_else = "allow"
option_if_let_else = "allow"
or_fun_call = "allow"
range_plus_one = "allow"
redundant_clone = "allow"
redundant_closure_for_method_calls = "allow"
ref_option = "allow"
similar_names = "allow"
string_lit_as_bytes = "allow"
struct_excessive_bools = "allow"
struct_field_names = "allow"
transmute_undefined_repr = "allow"
too_many_lines = "allow"
unnecessary_wraps = "allow"
unused_self = "allow"
used_underscore_items = "allow"

[workspace.lints.rust]
mismatched_lifetime_syntaxes = "allow"

[workspace.dependencies]
arrow = "56.0.0"
parquet = "56.0.0"
git2 = "0.19"
#tree-sitter-language = { version = "0.26.0", path = "vendor/tree-sitter/crates/language" }
cc = "1.0.34"
serde_json = { version = "1.0.143", features = ["preserve_order"] }

# --- Generated Documentation References ---
# This section provides links to key documentation generated during
# collaborative sessions with the Gemini CLI agent.
#
# Standard Operating Procedures (SOPs):
# - docs/sops/code_doc_update_sop.md
#
# Conceptual Designs:
# - docs/rust_link_verifier_design.md
# - docs/git_to_minizinc_data_tool_design.md
# - docs/gemini_self_model_integration_proposal.md
# - docs/deep_bootstrap_verification_strategy.md
#
# Conceptual Models & Discussions:
# - docs/program_recognition_and_uf.md
# - docs/spec_to_binary_path.md
# - docs/conversation_summary_and_vision.md
#
# MiniZinc Models:
# - combinatorial_topologies.mzn
# - development_path_optimizer.mzn
# - development_path_optimizer.dzn
# - universal_bootstrap_godel.mzn
# - universal_bootstrap_godel.dzn
# - deep_bootstrap_chain.mzn
# - deep_bootstrap_chain.dzn