predicate bool_clause_reif(array [int] of var bool: as,array [int] of var bool: bs,var bool: b);
var 1..10: x:: output_var;
var set of 1..10: y:: output_var;
var bool: X_INTRODUCED_2_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_4_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_7_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_9_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_12_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_14_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_17_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_19_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_22_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_24_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_25_ ::var_is_introduced :: is_defined_var;
constraint array_bool_and([true,X_INTRODUCED_4_,true,X_INTRODUCED_9_,true,X_INTRODUCED_14_,true,X_INTRODUCED_19_,true,X_INTRODUCED_24_],true);
constraint set_in_reif(x,y,X_INTRODUCED_25_):: defines_var(X_INTRODUCED_25_);
constraint set_in_reif(2,y,X_INTRODUCED_2_):: defines_var(X_INTRODUCED_2_);
constraint bool_clause_reif([],[X_INTRODUCED_2_],X_INTRODUCED_4_):: defines_var(X_INTRODUCED_4_);
constraint set_in_reif(4,y,X_INTRODUCED_7_):: defines_var(X_INTRODUCED_7_);
constraint bool_clause_reif([],[X_INTRODUCED_7_],X_INTRODUCED_9_):: defines_var(X_INTRODUCED_9_);
constraint set_in_reif(6,y,X_INTRODUCED_12_):: defines_var(X_INTRODUCED_12_);
constraint bool_clause_reif([],[X_INTRODUCED_12_],X_INTRODUCED_14_):: defines_var(X_INTRODUCED_14_);
constraint set_in_reif(8,y,X_INTRODUCED_17_):: defines_var(X_INTRODUCED_17_);
constraint bool_clause_reif([],[X_INTRODUCED_17_],X_INTRODUCED_19_):: defines_var(X_INTRODUCED_19_);
constraint set_in_reif(10,y,X_INTRODUCED_22_):: defines_var(X_INTRODUCED_22_);
constraint bool_clause_reif([],[X_INTRODUCED_22_],X_INTRODUCED_24_):: defines_var(X_INTRODUCED_24_);
constraint int_le_reif(5,x,X_INTRODUCED_25_);
solve  satisfy;
