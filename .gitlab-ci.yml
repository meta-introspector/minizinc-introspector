stages:
  - build
  - test
  - trigger

.download_vendor: &download_vendor
  - curl --location --header "PRIVATE-TOKEN:$ACCESS_TOKEN" --silent https://gitlab.com/api/v4/snippets/1796163/raw | tr -d '\r' > download.sh
  - sh download.sh vendor master bundle:${MZNARCH} vendor.zip
  - unzip -q vendor.zip

.download_vendor: &download_vendor_win
  - curl -o download.sh --location --header "PRIVATE-TOKEN:%ACCESS_TOKEN%" --silent https://gitlab.com/api/v4/snippets/1796163/raw
  - dos2unix download.sh
  - sh download.sh vendor master vendor:%MZNARCH% vendor.zip
  - unzip -q vendor.zip

variables:
  # CCache settings
  CCACHE_DIR: "$CI_PROJECT_DIR/.ccache"
  CCACHE_MAXSIZE: "100M"

defaults:
  script:
    - echo "EMPTY!"
  interruptible: true

# ----------- Build MiniZinc -----------

.build:
  stage: build
  interruptible: true
  before_script:
    - *download_vendor
  script:
    - cmake -S . -B build -G"$CMAKE_ARCH" -DCMAKE_BUILD_TYPE=Release -DBUILD_REF=$CI_PIPELINE_ID -DUSE_PROPRIETARY=OFF -DGecode_ROOT="$CI_PROJECT_DIR/vendor/gecode" -DGurobi_ROOT="$CI_PROJECT_DIR/vendor/gurobi" -DCPlex_ROOT="$CI_PROJECT_DIR/vendor/CPLEX_Studio/cplex" -DOsiCBC_ROOT="$CI_PROJECT_DIR/vendor/cbc" -DSCIP_ROOT="$CI_PROJECT_DIR/vendor/scip" -DXpress_ROOT="$CI_PROJECT_DIR/vendor/xpressmp" -DCMAKE_INSTALL_PREFIX="$CI_PROJECT_DIR/minizinc"
    - cmake --build build --config Release --target install
  artifacts:
    paths: [minizinc/]
  cache:
    key: "$CI_JOB_NAME"
    paths: [.ccache, vendor.zip*]
  only: [tags, merge_requests, pipelines, develop, master]

build:linux:
  extends: .build
  image: dekker1/minibuild:cpp
  variables:
    MZNARCH: "linux"
    CMAKE_ARCH: "Ninja"
  tags: [linux, docker]

build:musl:
  extends: .build
  image: dekker1/minibuild:alpine
  variables:
    MZNARCH: "musl"
    CMAKE_ARCH: "Ninja"
  tags: [linux, docker]

build:osx:
  extends: .build
  variables:
    MZNARCH: "osx"
    CMAKE_ARCH: "Ninja"
  tags: [osx, cmake, cpp]

build:win64:
  extends: .build
  variables:
    MZNARCH: "win64"
    CMAKE_ARCH: "Visual Studio 15 2017 Win64"
  before_script:
    - *download_vendor_win
  script:
    - cmake -S . -B build -G"%CMAKE_ARCH%" -DBUILD_REF=%CI_PIPELINE_ID% -DUSE_PROPRIETARY=OFF -DGecode_ROOT="%CI_PROJECT_DIR%/vendor/gecode" -DGurobi_ROOT="%CI_PROJECT_DIR%/vendor/gurobi" -DCPlex_ROOT="%CI_PROJECT_DIR%/vendor/CPLEX_Studio/cplex" -DOsiCBC_ROOT="%CI_PROJECT_DIR%/vendor/cbc" -DSCIP_ROOT="%CI_PROJECT_DIR%/vendor/scip" -DXpress_ROOT="%CI_PROJECT_DIR%/vendor/xpressmp" -DCMAKE_INSTALL_PREFIX="%CI_PROJECT_DIR%/minizinc"
    - cmake --build build --config Release --target install
  cache:
    key: "win64"
    paths: [vendor.zip*]
  tags: [win64, cmake, cpp]
  only: [tags, merge_requests, pipelines, develop, master]

build:wasm_complete:
  extends: .build
  image: emscripten/emsdk
  variables:
    MZNARCH: "wasm"
    CMAKE_ARCH: "Unix Makefiles"
  script:
    - apt-get update && apt-get install -qq python3
    - emcmake cmake -S . -B build -G"$CMAKE_ARCH" -DCMAKE_FIND_ROOT_PATH="/" -DCMAKE_BUILD_TYPE=MinSizeRel -v -DBUILD_REF=$CI_PIPELINE_ID -DUSE_PROPRIETARY=OFF -DGecode_ROOT="$CI_PROJECT_DIR/vendor/gecode" -DGurobi_ROOT="$CI_PROJECT_DIR/vendor/gurobi" -DCPlex_ROOT="$CI_PROJECT_DIR/vendor/CPLEX_Studio/cplex" -DOsiCBC_ROOT="$CI_PROJECT_DIR/vendor/cbc" -DSCIP_ROOT="$CI_PROJECT_DIR/vendor/scip" -DXpress_ROOT="$CI_PROJECT_DIR/vendor/xpressmp" -DCMAKE_INSTALL_PREFIX="$CI_PROJECT_DIR/minizinc"
    - cmake --build build --config MinSizeRel --target install
  tags: [docker, high-mem]
  when: manual

build:wasm_minimal:
  extends: .build
  image: emscripten/emsdk
  variables:
    MZNARCH: "wasm"
    CMAKE_ARCH: "Unix Makefiles"
  script:
    - apt-get update && apt-get install -qq python3
    - emcmake cmake -S . -B build -G"$CMAKE_ARCH" -DCMAKE_BUILD_TYPE=MinSizeRel -v -DBUILD_REF=$CI_PIPELINE_ID -DUSE_PROPRIETARY=OFF -DGecode_ROOT="$CI_PROJECT_DIR/vendor/gecode" -DGurobi_ROOT="$CI_PROJECT_DIR/vendor/gurobi" -DCPlex_ROOT="$CI_PROJECT_DIR/vendor/CPLEX_Studio/cplex" -DOsiCBC_ROOT="$CI_PROJECT_DIR/vendor/cbc" -DSCIP_ROOT="$CI_PROJECT_DIR/vendor/scip" -DXpress_ROOT="$CI_PROJECT_DIR/vendor/xpressmp" -DCMAKE_INSTALL_PREFIX="$CI_PROJECT_DIR/minizinc"
    - cmake --build build --config MinSizeRel --target install
  tags: [docker]
  when: manual

# ----------- Test Suite -----------

test:format:
  stage: test
  image: dekker1/minibuild:clang-format
  script:
    - cmake -S . -B build -GNinja -DCLANG_FORMAT_EXECUTABLE="run-clang-format" -DCLANG_FORMAT_FLAGS="--color always"
    - cmake --build build --target format
  tags: [linux, docker]
  only:
    changes:
      - "**/*.{cpp,c,h,hh,hpp}"
      - .clang-format
    refs:
      - merge_requests
  needs: []

test:analyse:
  extends: .build
  stage: test
  image: dekker1/minibuild:clang-tidy
  variables:
    MZNARCH: "linux"
    CMAKE_ARCH: "Ninja"
  script:
    - cmake -S . -B build -G"$CMAKE_ARCH" -DCMAKE_CXX_CLANG_TIDY="clang-tidy" -DCMAKE_BUILD_TYPE="Debug" -DGecode_ROOT="$CI_PROJECT_DIR/vendor/gecode" -DGurobi_ROOT="$CI_PROJECT_DIR/vendor/gurobi" -DCPlex_ROOT="$CI_PROJECT_DIR/vendor/CPLEX_Studio/cplex" -DOsiCBC_ROOT="$CI_PROJECT_DIR/vendor/cbc" -DSCIP_ROOT="$CI_PROJECT_DIR/vendor/scip" -DXpress_ROOT="$CI_PROJECT_DIR/vendor/xpressmp"
    - cmake --build build --config Debug
  tags: [linux, docker]
  only:
    changes:
      - "**/*.{cpp,c,h,hh,hpp}"
      - .clang-tidy
    refs:
      - merge_requests
  needs: []

include:
  - local: '/tests/.gitlab-ci-testing-pipeline.yml'

# ----------- Trigger FindMUS pipeline -----------

trigger:findmus:
  stage: trigger
  trigger:
    project: minizinc/FindMUS
    branch: develop
  only: [develop]
