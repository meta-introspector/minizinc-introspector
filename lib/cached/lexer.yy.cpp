
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mzn_yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mzn_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void mzn_yyrestart (FILE *input_file ,yyscan_t yyscanner );
void mzn_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE mzn_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void mzn_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mzn_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void mzn_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void mzn_yypop_buffer_state (yyscan_t yyscanner );

static void mzn_yyensure_buffer_stack (yyscan_t yyscanner );
static void mzn_yy_load_buffer_state (yyscan_t yyscanner );
static void mzn_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER mzn_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE mzn_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE mzn_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE mzn_yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *mzn_yyalloc (yy_size_t ,yyscan_t yyscanner );
void *mzn_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void mzn_yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer mzn_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mzn_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mzn_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mzn_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mzn_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define mzn_yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yynoreturn yy_fatal_error (yyconst char* msg ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 176
#define YY_END_OF_BUFFER 177
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[494] =
    {   0,
        0,    0,  163,  163,  163,  163,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  177,  175,    3,    2,
      175,  162,  175,   23,  175,  159,  103,   99,   33,  101,
       33,  105,   29,   29,   33,  110,  120,  114,  137,   19,
      175,   21,   37,  175,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,   33,  175,  175,  175,    1,  163,  173,
      172,  170,  172,    1,  171,  172,   16,   18,   17,    1,
        6,    8,    7,    1,   11,   13,   12,    1,  160,  161,
      122,    0,  158,   23,    0,    0,  138,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,  124,   34,   14,  132,    0,
       29,    0,    0,    0,   36,  126,  112,  109,  118,  116,
      137,   20,  130,  139,  139,    0,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,   56,   61,
      137,  137,  137,  137,  137,  137,   72,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   22,  134,  146,
        0,    0,    0,    0,  163,  167,  166,  168,  166,  164,
      165,  169,   16,   15,    6,    5,   11,   10,  157,  158,

        0,  104,  100,    0,  102,    0,    0,  106,    0,  111,
        0,    0,  121,    0,  115,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    4,   30,    0,   32,
        0,   27,   28,  128,  139,  139,    0,  174,   38,   40,
      137,  137,  137,  137,  137,  137,   46,  137,  137,  137,
      137,  137,  137,  137,  137,   63,   64,  137,  137,  137,
       68,   70,   74,  137,   75,  137,  137,  137,   79,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
       94,  137,   97,  147,  148,  149,  140,  141,  142,  145,
      150,  151,  156,  155,  152,  153,  154,  143,  144,  157,

      123,  108,  125,   35,  133,  127,    0,  113,  119,  117,
      131,    0,    0,   62,    0,    0,    0,    0,    0,    0,
        0,    0,  135,    9,    0,    0,    0,    0,  139,  137,
      137,   42,   43,  137,  137,   48,   50,  137,   53,  137,
      137,  137,  137,  137,  137,   65,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,   88,   89,   24,
      137,   91,  137,  137,  137,  129,    0,   47,    0,   69,
       71,    0,    0,    0,    0,   98,    0,   31,    0,    0,
       26,  139,  137,   41,  137,  137,  137,   52,   25,   54,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

       80,  137,  137,  137,  137,   90,   92,  137,   96,   49,
        0,    0,    0,    0,    0,    0,   26,  139,  137,  137,
      137,   51,  137,  137,  137,  137,  137,  137,   73,  137,
       77,  137,   81,   82,  137,  137,  137,    0,    0,    0,
        0,   93,  139,  137,  137,   45,  137,   57,  137,  137,
      137,  137,  137,   78,  137,   86,  137,    0,   83,    0,
        0,  139,  137,  137,   55,   58,  137,   66,   67,  137,
       84,  137,    0,    0,   87,  139,  137,  137,   59,   76,
      137,    0,   85,  136,   39,   44,  137,   60,  137,  137,
      137,   95,    0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   14,   22,
       23,   24,    1,    1,   25,   25,   25,   25,   26,   25,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   28,
       27,   27,   27,   27,   27,   27,   27,   29,   27,   27,
       30,   31,   32,    1,   33,   34,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   44,   27,   45,   46,   47,
       48,   49,   27,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   14,   59,   14,   60,    1,   61,    1,    1,
       62,    1,    1,   63,   64,   65,   66,   67,    1,    1,
        1,    1,    1,   68,    1,   69,    1,   70,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   71,    1,   72,
        1,    1,    1,   73,   74,    1,   75,   76,   77,   78,
        1,   79,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   80,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   81,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[83] =
    {   0,
        1,    1,    2,    3,    1,    4,    5,    1,    1,    1,
        1,    6,    1,    1,    1,    7,    1,    8,    8,    8,
        1,    1,    1,    1,    9,    9,   10,    9,   10,    1,
        4,    1,   11,   12,    9,    9,    9,    9,    9,    9,
       10,   10,   10,   10,   10,   10,   10,   10,    9,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3
    } ;

static yyconst flex_uint16_t yy_base[515] =
    {   0,
        0,    0,   80,   84,   88,   92,   90,   94,   96,   97,
       98,  100,  846,  845,  844,  843,  853,  858,  858,  858,
      829,  858,  844,    0,  178,  858,  858,  837,  858,  825,
      832,   73,   98,  110,  826,   98,  823,  822,    0,  785,
      826,  858,  794,    0,   84,  793,   72,   96,   93,   97,
      101,  104,  109,  792,  111,  118,  800,  175,  146,  791,
      802,  794,  787,  802,  146,  754,  141,  858,    0,  858,
      858,  858,  209,  858,  858,  227,    0,  858,  815,    0,
        0,  858,  814,    0,    0,  858,  813,    0,  858,  858,
      858,    0,    0,    0,  124,  158,  858,  166,  204,  217,

      189,  213,  234,  236,  237,  812,  221,  238,  241,  242,
      244,  245,  246,  287,  858,  858,  858,  816,  858,  262,
      287,  296,  303,  193,  858,  803,  858,  858,  858,  858,
        0,  858,  858,    0,  790,  791,  116,  774,  775,  771,
      774,  780,  230,  768,  118,  773,  769,  769,    0,  226,
      763,  763,  757,  765,  773,  758,    0,  757,  756,  757,
      767,  768,  752,  751,  757,  751,  255,  754,  748,  759,
      744,  747,  746,  751,  743,  753,  741,  858,  858,  858,
      218,  283,  258,  261,    0,  858,  858,  858,  858,  858,
      858,  858,    0,  858,    0,  858,    0,  858,    0,    0,

      262,  858,  858,  286,  858,  289,  303,  858,  781,  858,
      326,  318,  858,  324,  858,  337,  780,  338,  342,  343,
      344,  353,  354,  355,  356,  357,  776,  385,  352,  389,
      394,  367,  318,  858,    0,  743,  752,  858,  737,    0,
      749,  738,  743,  730,  745,  739,    0,  739,  734,  730,
      724,  739,  736,  727,  728,  731,    0,  717,  725,  724,
        0,    0,    0,  717,    0,  727,  716,  720,    0,  708,
      718,  709,  720,  720,  705,  709,  716,  709,  714,  704,
      708,  700,    0,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858,  858,  858,    0,

      858,  858,  858,  858,  858,  858,  368,  858,  858,  858,
      858,  370,  384,  858,  408,  409,  412,  413,  414,  417,
      418,  419,  858,  858,  439,  137,  234,  450,  710,  696,
      690,    0,    0,  694,  692,    0,  701,  703,    0,  703,
      689,  688,  686,  691,  687,    0,  690,  689,  681,  690,
      652,  647,  651,  639,  639,  624,  621,    0,    0,    0,
      624,    0,  615,  608,  603,  858,  429,  858,  442,  858,
      858,  447,  452,  453,  458,  858,  417,  456,  475,  461,
      479,  593,  591,    0,  575,  579,  533,    0,    0,    0,
      529,  533,  527,  518,  525,  524,  514,  528,  526,  523,

        0,  520,  508,  508,  518,    0,    0,  510,    0,  858,
      473,  476,  478,  482,  492,  492,  496,  503,  500,  516,
      498,    0,  498,  506,  492,  499,  479,  478,    0,  500,
        0,  470,    0,    0,  487,  466,  448,  494,  499,  508,
      509,  858,  434,  429,  428,    0,  399,    0,  385,  404,
      386,  358,  339,    0,  338,    0,  349,  511,  858,  510,
      512,  326,  328,  320,    0,    0,  304,    0,    0,  269,
        0,  192,  522,  523,  858,  200,  145,  132,    0,    0,
      138,  525,  858,    0,    0,    0,  108,  858,   77,   55,
       51,    0,  858,  574,  586,  598,  610,  618,  628,  640,

      645,  648,  650,  660,  672,  684,  696,  700,  703,  707,
      711,  716,  721,  723
    } ;

static yyconst flex_int16_t yy_def[515] =
    {   0,
      493,    1,  494,  494,  494,  494,  495,  495,  496,  496,
      497,  497,    1,    1,    1,    1,  493,  493,  493,  493,
      493,  493,  498,  499,  500,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  501,  493,
      493,  493,  502,  503,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  493,  493,  493,  493,  493,  504,  493,
      493,  493,  493,  493,  493,  493,  505,  493,  493,  505,
      506,  493,  493,  506,  507,  493,  493,  507,  493,  493,
      493,  508,  509,  499,  500,  500,  493,  500,  500,  500,

      500,  500,  500,  500,  500,  493,  500,  500,  500,  500,
      500,  500,  500,  500,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      501,  493,  493,  510,  510,  511,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  493,  493,  493,
      493,  493,  493,  493,  504,  493,  493,  493,  493,  493,
      493,  493,  505,  493,  506,  493,  507,  493,  512,  509,

      500,  493,  493,  500,  493,  500,  500,  493,  493,  493,
      500,  500,  493,  500,  493,  500,  493,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  493,  493,  493,  493,
      493,  513,  493,  493,  510,  510,  511,  493,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  512,

      493,  493,  493,  493,  493,  493,  500,  493,  493,  493,
      493,  500,  500,  493,  500,  500,  500,  500,  500,  500,
      500,  500,  493,  493,  493,  514,  514,  493,  510,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  493,  500,  493,  500,  493,
      493,  500,  500,  500,  500,  493,  493,  493,  493,  493,
      493,  510,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,

      501,  501,  501,  501,  501,  501,  501,  501,  501,  493,
      500,  500,  500,  500,  500,  493,  493,  510,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  500,  500,  500,
      500,  493,  510,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  500,  493,  500,
      500,  510,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  500,  500,  493,  510,  501,  501,  501,  501,
      501,  500,  493,  510,  501,  501,  501,  493,  501,  501,
      501,  501,    0,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493
    } ;

static yyconst flex_uint16_t yy_nxt[941] =
    {   0,
       18,   19,   20,   19,   21,   22,   23,   24,   25,   26,
       18,   27,   28,   29,   30,   31,   32,   33,   34,   34,
       35,   36,   37,   38,   39,   39,   39,   39,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       39,   39,   51,   39,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   39,   39,   64,   65,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   66,
       67,   68,   70,   71,  118,   72,   70,   71,  492,   72,
       70,   71,   78,   75,   70,   71,   78,   75,   82,   82,

       86,   79,   86,  119,  491,   79,  140,   83,   83,   87,
       73,   87,  126,  120,   73,  121,  121,  121,   76,  141,
      127,  128,   76,  122,  490,  120,  123,  121,  121,  121,
      137,  146,   97,  138,  142,  122,  122,  144,  143,  145,
      149,  147,  151,  153,  489,  124,  152,  150,  122,  148,
      157,  154,  160,  123,  493,  249,  155,  179,  179,  158,
      179,   74,  239,  159,  379,   74,   97,  161,  179,   74,
      250,   80,  240,   74,  202,   80,  487,   84,   84,   88,
      201,   88,   96,  486,  169,  379,   97,  170,  493,   98,
       99,  485,  100,  101,  102,  171,  493,   97,  172,  103,

      104,  105,  173,  181,  207,  182,  183,  184,  106,  163,
      233,  233,  203,  164,  186,  107,  204,  187,  188,  493,
      108,  208,  165,  109,  110,  205,  166,  167,  111,   97,
      112,  168,  186,  113,  493,  187,  192,  114,  484,  189,
      206,  481,  210,  209,  213,  215,   97,  493,  211,   97,
       97,  493,   97,   97,   97,  190,  212,  189,  214,  216,
      191,  379,  254,  218,  493,  255,  493,  493,  493,  246,
      301,  493,  493,  190,  493,  493,  493,  256,  191,  228,
      228,  228,  379,  247,  219,  284,  285,  286,  220,  221,
      272,  224,  493,  225,  302,   97,  222,  303,  226,  226,

      223,  226,  120,  273,  121,  121,  121,  480,  229,  226,
      229,  304,  122,  230,  230,  230,  493,  493,  231,  493,
      232,  232,  232,  298,  299,  122,  308,  232,  232,  295,
      296,  297,  309,  493,  306,  233,  233,  232,  232,  232,
      232,  232,  232,  287,  288,  310,   97,  289,  493,  307,
      314,   97,   97,  290,  493,  479,  493,  291,  292,  293,
      294,   97,   97,   97,   97,  323,  478,  493,  493,  230,
      230,  230,  493,  493,  493,  477,  366,  312,   97,  476,
      316,  472,  327,  493,  493,  493,  493,  493,  318,  471,
      470,  313,  368,  315,  328,  317,  469,  321,  493,  320,

      493,  319,  228,  228,  228,  322,  230,  230,  230,  367,
      325,  326,  326,  326,  493,  328,   97,  370,  326,  326,
      371,   97,   97,  325,  468,   97,   97,  376,  326,  326,
      326,  326,  326,  326,  378,  378,  378,  410,  493,  493,
      467,  466,  493,  493,  493,  465,  369,  493,  493,  493,
       97,  377,  373,  377,  374,   97,  378,  378,  378,  493,
       97,   97,  380,  372,  380,  375,   97,  381,  381,  381,
      464,  463,  493,  378,  378,  378,  462,  493,  381,  381,
      381,   97,  493,  493,   97,  412,   97,  416,  493,  416,
       97,  411,  417,  417,  417,  414,  381,  381,  381,  457,

      442,  413,   97,  493,  415,  456,  493,  459,  493,  417,
      417,  417,  493,  417,  417,  417,   97,   97,   97,   97,
      475,  441,  493,  438,  493,  455,  454,  439,  440,  493,
       97,  483,  458,  488,  453,  452,  451,  450,  493,  493,
      493,  493,  493,  449,  448,  447,  460,  473,  461,  446,
      445,  444,  493,  493,  443,  493,  437,  436,  435,  434,
      433,  474,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  482,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   93,  421,  420,  419,   93,   93,   94,  418,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       95,  409,  408,   95,   95,   95,   95,   95,   95,   95,
       95,   95,  131,  131,  131,  131,  134,  134,  136,  136,
      185,  407,  406,  405,  185,  185,  185,  185,  185,  185,
      185,  185,  193,  404,  193,  193,  193,  403,  193,  193,
      193,  193,  193,  193,  195,  402,  195,  195,  195,  401,
      195,  195,  195,  195,  195,  195,  197,  400,  197,  197,

      197,  399,  197,  197,  197,  197,  197,  197,  199,  199,
      200,  200,  200,  200,  235,  235,  235,  235,  237,  237,
      237,  237,  237,  300,  300,  300,  300,  232,  232,  232,
      326,  326,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  238,  329,  324,  311,  305,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,

      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  253,  252,  251,  248,  245,
      244,  243,  242,  241,  238,  236,  234,  227,  217,  198,
      196,  194,  180,  178,  177,  176,  175,  174,  162,  156,
      139,  135,  133,  132,  130,  129,  125,  117,  116,  115,
       92,   91,  493,   90,   90,   89,   89,   17,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493
    } ;

static yyconst flex_int16_t yy_chk[941] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,   32,    3,    4,    4,  491,    4,
        5,    5,    7,    5,    6,    6,    8,    6,    9,   10,

       11,    7,   12,   32,  490,    8,   47,    9,   10,   11,
        3,   12,   36,   33,    4,   33,   33,   33,    5,   47,
       36,   36,    6,   33,  489,   34,   33,   34,   34,   34,
       45,   50,   95,   45,   48,   34,   33,   49,   48,   49,
       51,   50,   52,   53,  487,   33,   52,   51,   34,   50,
       55,   53,   56,   33,   95,  145,   53,   65,   65,   55,
       65,    3,  137,   55,  326,    4,   96,   56,   65,    5,
      145,    7,  137,    6,   98,    8,  481,    9,   10,   11,
       96,   12,   25,  478,   59,  326,   25,   59,   96,   25,
       25,  477,   25,   25,   25,   59,   98,  101,   59,   25,

       25,   25,   59,   67,  101,   67,   67,   67,   25,   58,
      124,  124,   99,   58,   73,   25,   99,   73,   73,  101,
       25,  102,   58,   25,   25,  100,   58,   58,   25,  107,
       25,   58,   76,   25,   99,   76,   76,   25,  476,   73,
      100,  472,  103,  102,  104,  105,  108,  100,  103,  109,
      110,  107,  111,  112,  113,   73,  103,   76,  104,  105,
       73,  327,  150,  107,  103,  150,  104,  105,  108,  143,
      201,  109,  110,   76,  111,  112,  113,  150,   76,  120,
      120,  120,  327,  143,  108,  181,  181,  181,  109,  110,
      167,  112,  201,  113,  204,  114,  111,  206,  114,  114,

      111,  114,  121,  167,  121,  121,  121,  470,  122,  114,
      122,  207,  121,  122,  122,  122,  204,  114,  123,  206,
      123,  123,  123,  184,  184,  121,  212,  123,  123,  183,
      183,  183,  214,  207,  211,  233,  233,  123,  123,  123,
      123,  123,  123,  182,  182,  216,  218,  182,  212,  211,
      219,  220,  221,  182,  214,  467,  211,  182,  182,  182,
      182,  222,  223,  224,  225,  226,  464,  216,  218,  229,
      229,  229,  219,  220,  221,  463,  307,  218,  312,  462,
      220,  457,  232,  222,  223,  224,  225,  226,  222,  455,
      453,  218,  313,  219,  232,  221,  452,  224,  307,  223,

      312,  222,  228,  228,  228,  225,  230,  230,  230,  312,
      228,  231,  231,  231,  313,  232,  315,  316,  231,  231,
      317,  318,  319,  228,  451,  320,  321,  322,  231,  231,
      231,  231,  231,  231,  377,  377,  377,  367,  315,  316,
      450,  449,  317,  318,  319,  447,  315,  320,  321,  322,
      369,  325,  319,  325,  320,  372,  325,  325,  325,  367,
      373,  374,  328,  318,  328,  321,  375,  328,  328,  328,
      445,  444,  369,  378,  378,  378,  443,  372,  380,  380,
      380,  411,  373,  374,  412,  372,  413,  379,  375,  379,
      414,  369,  379,  379,  379,  374,  381,  381,  381,  437,

      415,  373,  438,  411,  375,  436,  412,  439,  413,  416,
      416,  416,  414,  417,  417,  417,  440,  441,  460,  458,
      461,  414,  415,  411,  438,  435,  432,  412,  413,  439,
      473,  474,  438,  482,  430,  428,  427,  426,  440,  441,
      460,  458,  461,  425,  424,  423,  440,  458,  441,  421,
      420,  419,  473,  474,  418,  482,  408,  405,  404,  403,
      402,  460,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  387,  473,  494,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  494,  494,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  496,  496,

      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  498,  386,  385,  383,  498,  498,  499,  382,
      499,  499,  499,  499,  499,  499,  499,  499,  499,  499,
      500,  365,  364,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  501,  501,  501,  501,  502,  502,  503,  503,
      504,  363,  361,  357,  504,  504,  504,  504,  504,  504,
      504,  504,  505,  356,  505,  505,  505,  355,  505,  505,
      505,  505,  505,  505,  506,  354,  506,  506,  506,  353,
      506,  506,  506,  506,  506,  506,  507,  352,  507,  507,

      507,  351,  507,  507,  507,  507,  507,  507,  508,  508,
      509,  509,  509,  509,  510,  510,  510,  510,  511,  511,
      511,  511,  511,  512,  512,  512,  512,  513,  513,  513,
      514,  514,  350,  349,  348,  347,  345,  344,  343,  342,
      341,  340,  338,  337,  335,  334,  331,  330,  329,  282,
      281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  268,  267,  266,  264,  260,  259,  258,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  246,  245,
      244,  243,  242,  241,  239,  237,  236,  227,  217,  209,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,

      166,  165,  164,  163,  162,  161,  160,  159,  158,  156,
      155,  154,  153,  152,  151,  148,  147,  146,  144,  142,
      141,  140,  139,  138,  136,  135,  126,  118,  106,   87,
       83,   79,   66,   64,   63,   62,   61,   60,   57,   54,
       46,   43,   41,   40,   38,   37,   35,   31,   30,   28,
       23,   21,   17,   16,   15,   14,   13,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <guido.tack@monash.edu>
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
#if defined __GNUC__
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wdeprecated"
#elif defined _MSC_VER
#pragma warning(push, 1)
#endif

namespace MiniZinc{ class ParserLocation; }
#define YYLTYPE MiniZinc::ParserLocation
#define YYLTYPE_IS_DECLARED 1
#define YYLTYPE_IS_TRIVIAL 0

#include <minizinc/parser.hh>

int utf8len(const char* s) {
  int l=0;
  for (int i=0; s[i] != '\0'; i++)
    if ((s[i] & 0xc0) != 0x80)
      l++;
  return l;
}

int yy_input_proc(char* buf, int size, yyscan_t yyscanner);
#define YY_INPUT(buf, result, max_size) \
  result = yy_input_proc(buf, max_size, yyscanner);

#define YY_USER_ACTION \
  { MiniZinc::ParserState* parm =  \
      static_cast<MiniZinc::ParserState*>(mzn_yyget_extra(yyscanner)); \
    yylloc->first_line(yylloc->last_line()); \
    yylloc->first_column(yylloc->last_column()+1); \
    if(parm->hadNewline) { \
      parm->hadNewline=false; \
      parm->lineStartPos += parm->nTokenNextStart; \
      parm->nTokenNextStart=1; \
      yylloc->last_line(yylloc->last_line()+1); \
      yylloc->first_line(yylloc->last_line()); \
      yylloc->first_column(1); \
    } \
    if(yytext[0] == '\n') { \
      parm->hadNewline=true; \
      parm->nTokenNextStart+=0; \
    } else { \
      parm->nTokenNextStart+=yyleng; \
    } \
    yylloc->last_column(yylloc->first_column()+utf8len(yytext)-1); \
  }

bool hexstrtointval(const char* s, long long int& v) {
  std::istringstream iss(s);
  iss >> std::hex >> v;
  return !iss.fail();
}

bool octstrtointval(const char* s, long long int& v) {
  std::istringstream iss(s);
  iss >> std::oct >> v;
  return !iss.fail();
}

bool fast_strtointval(const char* s, long long int& v) {
  MiniZinc::IntVal x = 0;
  try {
    for (; *s != '\0'; ++s) {
      x = (x*10) + (*s - '0');
    }
  } catch (MiniZinc::ArithmeticError&) {
    return false;
  }
  v = x.toInt();
  return true;
}

bool strtofloatval(const char* s, double& v) {
  std::istringstream iss(s);
  iss >> v;
  return !iss.fail();
}

void clearBuffer(void* parm) {
  MiniZinc::ParserState* pp =
    static_cast<MiniZinc::ParserState*>(parm);
  pp->stringBuffer = "";
}

void appendBufferString(void* parm, const char* s) {
  MiniZinc::ParserState* pp =
  static_cast<MiniZinc::ParserState*>(parm);
  pp->stringBuffer += s;
}

void appendBufferChar(void* parm, char s) {
  MiniZinc::ParserState* pp =
  static_cast<MiniZinc::ParserState*>(parm);
  pp->stringBuffer += s;
}

char* bufferData(void* parm) {
  MiniZinc::ParserState* pp =
    static_cast<MiniZinc::ParserState*>(parm);
  return strdup(pp->stringBuffer.c_str());
}

#define INITIAL 0
#define string 1
#define string_quote 2
#define multilinecomment 3
#define doccomment 4
#define doccomment_file 5
#define bracket_exp 6
#define quoted_exp 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int mzn_yylex_init (yyscan_t* scanner);

int mzn_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mzn_yylex_destroy (yyscan_t yyscanner );

int mzn_yyget_debug (yyscan_t yyscanner );

void mzn_yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE mzn_yyget_extra (yyscan_t yyscanner );

void mzn_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *mzn_yyget_in (yyscan_t yyscanner );

void mzn_yyset_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *mzn_yyget_out (yyscan_t yyscanner );

void mzn_yyset_out  (FILE * _out_str ,yyscan_t yyscanner );

			int mzn_yyget_leng (yyscan_t yyscanner );

char *mzn_yyget_text (yyscan_t yyscanner );

int mzn_yyget_lineno (yyscan_t yyscanner );

void mzn_yyset_lineno (int _line_number ,yyscan_t yyscanner );

int mzn_yyget_column  (yyscan_t yyscanner );

void mzn_yyset_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * mzn_yyget_lval (yyscan_t yyscanner );

void mzn_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *mzn_yyget_lloc (yyscan_t yyscanner );
    
        void mzn_yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mzn_yywrap (yyscan_t yyscanner );
#else
extern int mzn_yywrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int _new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int mzn_yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int mzn_yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mzn_yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				mzn_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		mzn_yy_load_buffer_state(yyscanner );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 494 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 858 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ return MZN_INVALID_NULL; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ /* ignore whitespace */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ yy_push_state(doccomment,yyscanner); clearBuffer(mzn_yyget_extra(yyscanner)); }
	YY_BREAK

case 5:
YY_RULE_SETUP
{ yylval->sValue = bufferData(mzn_yyget_extra(yyscanner));
                    yy_pop_state(yyscanner); return MZN_DOC_COMMENT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ appendBufferString(mzn_yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ appendBufferString(mzn_yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
{ appendBufferString(mzn_yyget_extra(yyscanner), yytext); }
	YY_BREAK

case 9:
YY_RULE_SETUP
{ yy_push_state(doccomment_file,yyscanner); clearBuffer(mzn_yyget_extra(yyscanner)); }
	YY_BREAK

case 10:
YY_RULE_SETUP
{ yylval->sValue = bufferData(mzn_yyget_extra(yyscanner));
    yy_pop_state(yyscanner); return MZN_DOC_FILE_COMMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ appendBufferString(mzn_yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ appendBufferString(mzn_yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ appendBufferString(mzn_yyget_extra(yyscanner), yytext); }
	YY_BREAK

case 14:
YY_RULE_SETUP
{ yy_push_state(multilinecomment,yyscanner); }
	YY_BREAK

case 15:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ }
	YY_BREAK

case 19:
YY_RULE_SETUP
{ return MZN_LEFT_BRACKET; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return MZN_LEFT_2D_BRACKET; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return MZN_RIGHT_BRACKET; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return MZN_RIGHT_2D_BRACKET; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ /* ignore comments */ }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ yylval->iValue = 1; return MZN_BOOL_LITERAL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ yylval->iValue = 0; return MZN_BOOL_LITERAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
                  if (strtofloatval(yytext, yylval->dValue))
                  return MZN_FLOAT_LITERAL;
                  else
                  return MZN_INVALID_FLOAT_LITERAL;
                }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
                    if (hexstrtointval(yytext+2, yylval->iValue))
                      return MZN_INTEGER_LITERAL;
                    else
                      return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
                  if (octstrtointval(yytext+2, yylval->iValue))
                    return MZN_INTEGER_LITERAL;
                  else
                    return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
                  if (fast_strtointval(yytext, yylval->iValue))
                    return MZN_INTEGER_LITERAL;
                  else
                    return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
                  if (strtofloatval(yytext, yylval->dValue))
                  return MZN_FLOAT_LITERAL;
                  else
                  return MZN_INVALID_FLOAT_LITERAL;
                }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
                    if (strtofloatval(yytext, yylval->dValue))
                      return MZN_FLOAT_LITERAL;
                    else
                      return MZN_INVALID_FLOAT_LITERAL;
                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
                    if (strtofloatval(yytext, yylval->dValue))
                      return MZN_FLOAT_LITERAL;
                    else
                      return MZN_INVALID_FLOAT_LITERAL;
                  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
                    return *yytext; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return MZN_DOTDOT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return MZN_DOTDOT_QUOTED; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return MZN_COLONCOLON; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return MZN_UNDERSCORE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return MZN_ANN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return MZN_ANNOTATION; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return MZN_ANY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return MZN_ARRAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return MZN_BOOL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return MZN_CASE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return MZN_CONSTRAINT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return MZN_DEFAULT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return MZN_IDIV; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return MZN_IDIV_QUOTED; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return MZN_DIFF; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return MZN_DIFF_QUOTED; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return MZN_ELSE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return MZN_ELSEIF; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return MZN_ENDIF; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return MZN_ENUM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return MZN_FLOAT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return MZN_FUNCTION; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return MZN_IF; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return MZN_INCLUDE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return MZN_INFINITY; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return MZN_INTERSECT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return MZN_INTERSECT_QUOTED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return MZN_IN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return MZN_IN_QUOTED; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return MZN_INT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return MZN_LET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return MZN_LIST; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ yylval->bValue = false; return MZN_MAXIMIZE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ yylval->bValue = true; return MZN_MINIMIZE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return MZN_MOD; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return MZN_MOD_QUOTED; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return MZN_NOT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return MZN_NOT_QUOTED; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return MZN_OF; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return MZN_OUTPUT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return MZN_OPT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return MZN_PAR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return MZN_PREDICATE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return MZN_RECORD; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return MZN_SATISFY; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return MZN_SET; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return MZN_SOLVE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ return MZN_STRING; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return MZN_SUBSET; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return MZN_SUBSET_QUOTED; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return MZN_SUPERSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return MZN_SUPERSET_QUOTED; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return MZN_SYMDIFF; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ return MZN_SYMDIFF_QUOTED; }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ return MZN_TEST; }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ return MZN_THEN; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return MZN_TUPLE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ return MZN_TYPE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ return MZN_UNION; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ return MZN_UNION_QUOTED; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ return MZN_VAR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ return MZN_VARIANT_RECORD; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return MZN_WHERE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ return MZN_XOR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ return MZN_XOR_QUOTED; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ return MZN_PLUS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ return MZN_PLUS_QUOTED; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ return MZN_MINUS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ return MZN_MINUS_QUOTED; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ return MZN_MULT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ return MZN_MULT_QUOTED; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ return MZN_DIV; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ return MZN_DIV_QUOTED; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ return MZN_PLUSPLUS; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ return MZN_PLUSPLUS_QUOTED; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ return MZN_ABSENT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ return MZN_LE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ return MZN_LE_QUOTED; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ return MZN_LQ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ return MZN_LQ_QUOTED; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ return MZN_GR; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ return MZN_GR_QUOTED; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ return MZN_GQ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ return MZN_GQ_QUOTED; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ return MZN_EQ; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ return MZN_EQ_QUOTED; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ return MZN_EQ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ return MZN_EQ_QUOTED; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ return MZN_NQ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ return MZN_NQ_QUOTED; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ return MZN_IMPL; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ return MZN_IMPL_QUOTED; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ return MZN_RIMPL; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ return MZN_RIMPL_QUOTED; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ return MZN_EQUIV; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ return MZN_EQUIV_QUOTED; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ return MZN_OR; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ return MZN_OR_QUOTED; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ return MZN_AND; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ return MZN_AND_QUOTED; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext);
                    return MZN_QUOTED_IDENTIFIER; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0;
                    return MZN_IDENTIFIER; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{ yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
                    MiniZinc::ParserState* parm =
                    static_cast<MiniZinc::ParserState*>(mzn_yyget_extra(yyscanner));
                    if (parm->isFlatZinc) {
                      yylval->sValue = strdup(yytext); return MZN_IDENTIFIER;
                    } else {
                      return FLATZINC_IDENTIFIER;
                    }
                    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ yylval->sValue = strdup("forall"); return MZN_IDENTIFIER; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ yylval->sValue = strdup("exists"); return MZN_IDENTIFIER; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ return MZN_IN; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ return MZN_SUBSET; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ return MZN_SUPERSET; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ return MZN_INFINITY; }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ return MZN_NOT; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ return MZN_RIMPL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ return MZN_IMPL; }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ return MZN_EQUIV; }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ return MZN_AND; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ return MZN_OR; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ return MZN_NQ; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ return MZN_LQ; }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ return MZN_GQ; }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ return MZN_UNION; }
	YY_BREAK
case 156:
YY_RULE_SETUP
{ return MZN_INTERSECT; }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
  yylval->sValue = strdup(yytext+1); return MZN_TI_ENUM_IDENTIFIER; }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext+1); return MZN_TI_IDENTIFIER; }
	YY_BREAK
case 159:
YY_RULE_SETUP
{ yy_push_state(bracket_exp,yyscanner); return *yytext; }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); return *yytext; }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); yy_pop_state(yyscanner); yy_push_state(string_quote,yyscanner);
                  clearBuffer(mzn_yyget_extra(yyscanner)); }
	YY_BREAK
case 162:
YY_RULE_SETUP
{ yy_push_state(string,yyscanner); clearBuffer(mzn_yyget_extra(yyscanner)); }
	YY_BREAK
case 163:
YY_RULE_SETUP
{ appendBufferString(mzn_yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 164:
YY_RULE_SETUP
{ appendBufferChar(mzn_yyget_extra(yyscanner), '\n'); }
	YY_BREAK
case 165:
YY_RULE_SETUP
{ appendBufferChar(mzn_yyget_extra(yyscanner), '\t'); }
	YY_BREAK
case 166:
YY_RULE_SETUP
{ appendBufferChar(mzn_yyget_extra(yyscanner), yytext[1]); }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ appendBufferChar(mzn_yyget_extra(yyscanner), yytext[1]); }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ yylval->sValue = bufferData(mzn_yyget_extra(yyscanner));
                      yy_push_state(quoted_exp,yyscanner); return MZN_STRING_QUOTE_START; }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ yylval->sValue = bufferData(mzn_yyget_extra(yyscanner));
                      yy_push_state(quoted_exp,yyscanner); return MZN_STRING_QUOTE_MID; }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ yylval->sValue = bufferData(mzn_yyget_extra(yyscanner));
                      yy_pop_state(yyscanner); return MZN_STRING_LITERAL; }
	YY_BREAK
case 171:
YY_RULE_SETUP
{ yylval->sValue = bufferData(mzn_yyget_extra(yyscanner));
                            yy_pop_state(yyscanner); return MZN_STRING_QUOTE_END; }
	YY_BREAK
case 172:
YY_RULE_SETUP
{ return (unsigned char)yytext[0]; }
	YY_BREAK
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
{ return MZN_END_OF_LINE_IN_STRING; }
	YY_BREAK
case YY_STATE_EOF(string):
case YY_STATE_EOF(string_quote):
{ yy_pop_state(yyscanner); return MZN_UNTERMINATED_STRING; }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0; 
                    return MZN_QUOTED_IDENTIFIER; }
	YY_BREAK
case 175:
YY_RULE_SETUP
{ return (unsigned char)yytext[0]; }
	YY_BREAK
case 176:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
case YY_STATE_EOF(doccomment):
case YY_STATE_EOF(doccomment_file):
case YY_STATE_EOF(bracket_exp):
case YY_STATE_EOF(quoted_exp):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * mzn_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( mzn_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of mzn_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mzn_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mzn_yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mzn_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 82);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 494 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 82;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 494 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 493);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mzn_yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mzn_yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mzn_yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        mzn_yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            mzn_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	mzn_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	mzn_yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void mzn_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mzn_yypop_buffer_state();
	 *		mzn_yypush_buffer_state(new_buffer);
     */
	mzn_yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mzn_yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (mzn_yywrap()) processing, but the only time this flag
	 * is looked at is after mzn_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void mzn_yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE mzn_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mzn_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mzn_yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mzn_yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mzn_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	mzn_yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mzn_yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void mzn_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mzn_yyfree((void *) b->yy_ch_buf ,yyscanner );

	mzn_yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mzn_yyrestart() or at EOF.
 */
    static void mzn_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	mzn_yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then mzn_yy_init_buffer was _probably_
     * called from mzn_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void mzn_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		mzn_yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void mzn_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	mzn_yyensure_buffer_stack(yyscanner);

	/* This block is copied from mzn_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mzn_yy_switch_to_buffer. */
	mzn_yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void mzn_yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	mzn_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		mzn_yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mzn_yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mzn_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mzn_yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)mzn_yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in mzn_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mzn_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) mzn_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mzn_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	mzn_yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to mzn_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mzn_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE mzn_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return mzn_yy_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to mzn_yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mzn_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) _yybytes_len + 2;
	buf = (char *) mzn_yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mzn_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = mzn_yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mzn_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) mzn_yyalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) mzn_yyrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE mzn_yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int mzn_yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int mzn_yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *mzn_yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *mzn_yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int mzn_yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *mzn_yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void mzn_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void mzn_yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mzn_yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void mzn_yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "mzn_yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see mzn_yy_switch_to_buffer
 */
void mzn_yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void mzn_yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int mzn_yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void mzn_yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * mzn_yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void mzn_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *mzn_yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void mzn_yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* mzn_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int mzn_yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) mzn_yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* mzn_yylex_init_extra has the same functionality as mzn_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to mzn_yyalloc in
 * the yyextra field.
 */

int mzn_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    mzn_yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) mzn_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    mzn_yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mzn_yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * mzn_yylex_init()
     */
    return 0;
}

/* mzn_yylex_destroy is for both reentrant and non-reentrant scanners. */
int mzn_yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		mzn_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mzn_yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	mzn_yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        mzn_yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mzn_yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    mzn_yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mzn_yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *mzn_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void mzn_yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see mzn_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yy_input_proc(char* buf, int size, yyscan_t yyscanner) {
  MiniZinc::ParserState* parm = 
    static_cast<MiniZinc::ParserState*>(mzn_yyget_extra(yyscanner));
  return parm->fillBuffer(buf, size);
  // work around warning that yyunput is unused
  yyunput (0,buf,yyscanner);
}

