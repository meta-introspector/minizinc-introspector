
#line 3 "/Users/tack/Programming/MiniZinc/libmzn/build_xcode/lexer.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 173
#define YY_END_OF_BUFFER 174
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[483] =
    {   0,
        0,    0,  161,  161,  161,  161,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  174,  172,    3,    2,
      172,  160,  172,   23,  172,  157,  103,   99,   33,  101,
       33,  105,   29,   29,   33,  110,  120,  114,  136,   19,
      172,   21,   37,  172,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,   33,  172,  172,  172,    1,  161,  173,
      170,  168,  170,    1,  169,  170,   16,   18,   17,    1,
        6,    8,    7,    1,   11,   13,   12,    1,  158,  159,
      122,    0,  156,   23,    0,    0,  137,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  107,  124,   34,   14,  132,    0,
       29,    0,    0,    0,   36,  126,  112,  109,  118,  116,
      136,   20,  130,  138,    0,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,   56,   61,  136,
      136,  136,  136,  136,  136,   72,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,   22,  134,  145,    0,
        0,    0,    0,  161,  165,  164,  166,  164,  162,  163,
      167,   16,   15,    6,    5,   11,   10,  156,    0,  104,

      100,    0,  102,    0,    0,  106,    0,  111,    0,    0,
      121,    0,  115,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,   30,    0,   32,    0,   27,
       28,  128,  138,    0,  171,   38,   40,  136,  136,  136,
      136,  136,  136,   46,  136,  136,  136,  136,  136,  136,
      136,  136,   63,   64,  136,  136,  136,   68,   70,   74,
      136,   75,  136,  136,  136,   79,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,   94,  136,   97,
      146,  147,  148,  139,  140,  141,  144,  149,  150,  155,
      154,  151,  152,  153,  142,  143,  123,  108,  125,   35,

      133,  127,    0,  113,  119,  117,  131,    0,    0,   62,
        0,    0,    0,    0,    0,    0,    0,    0,  135,    9,
        0,    0,    0,    0,  136,  136,   42,   43,  136,  136,
       48,   50,  136,   53,  136,  136,  136,  136,  136,  136,
       65,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,   88,   89,   24,  136,   91,  136,  136,  136,
      129,    0,   47,    0,   69,   71,    0,    0,    0,    0,
       98,    0,   31,    0,    0,   26,  136,   41,  136,  136,
      136,   52,   25,   54,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,   80,  136,  136,  136,  136,   90,

       92,  136,   96,   49,    0,    0,    0,    0,    0,    0,
       26,  136,  136,  136,   51,  136,  136,  136,  136,  136,
      136,   73,  136,   77,  136,   81,   82,  136,  136,  136,
        0,    0,    0,    0,   93,  136,  136,   45,  136,   57,
      136,  136,  136,  136,  136,   78,  136,   86,  136,    0,
       83,    0,    0,  136,  136,   55,   58,  136,   66,   67,
      136,   84,  136,    0,    0,   87,  136,  136,   59,   76,
      136,    0,   85,   39,   44,  136,   60,  136,  136,  136,
       95,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    1,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   14,   22,
       23,   24,    1,    1,   25,   25,   25,   25,   26,   25,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   28,
       27,   27,   27,   27,   27,   27,   27,   29,   27,   27,
       30,   31,   32,    1,   33,   34,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   27,   27,   44,   45,   46,
       47,   48,   27,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   14,   58,   14,   59,    1,   60,    1,    1,
       61,    1,    1,   62,   63,   64,   65,   66,    1,    1,
        1,    1,    1,   67,    1,   68,    1,   69,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   70,    1,   71,
        1,    1,    1,   72,   73,    1,   74,   75,   76,   77,
        1,   78,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   79,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[82] =
    {   0,
        1,    1,    2,    3,    1,    4,    5,    1,    1,    1,
        1,    6,    1,    1,    1,    7,    1,    8,    8,    8,
        1,    1,    1,    1,    9,    9,   10,    9,   10,    1,
        4,    1,   11,   12,    9,    9,    9,    9,    9,    9,
       10,   10,   10,   10,   10,   10,   10,    9,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3
    } ;

static yyconst flex_int16_t yy_base[502] =
    {   0,
        0,    0,   79,   83,   87,   91,   89,   93,   95,   96,
       97,   99,  831,  830,  829,  828,  838,  843,  843,  843,
      814,  843,  829,    0,  176,  843,  843,  822,  843,  810,
      817,   72,   97,  109,  811,   97,  808,  807,    0,  771,
      811,  843,    0,    0,   84,  780,   84,   95,   60,   97,
       97,  103,  104,  779,  105,  105,  786,  173,  117,  778,
      788,  780,  774,  788,  171,  741,  139,  843,    0,  843,
      843,  843,  207,  843,  843,  224,    0,  843,  801,    0,
        0,  843,  800,    0,    0,  843,  799,    0,  843,  843,
      843,  808,    0,    0,  156,  187,  843,  166,  214,  223,

      228,  230,  233,  234,  237,  797,  231,  232,  240,  241,
      242,  258,  260,  270,  843,  843,  843,  801,  843,  143,
      290,  277,  295,  258,  843,  788,  843,  843,  843,  843,
        0,  843,  843,    0,  777,  256,  761,  762,  758,  761,
      766,  118,  755,  157,  760,  756,  756,    0,  285,  750,
      750,  744,  752,  759,  745,    0,  744,  743,  744,  753,
      754,  739,  738,  744,  738,  119,  741,  735,  745,  731,
      734,  733,  737,  730,  739,  728,  843,  843,  843,  250,
      277,  255,  218,    0,  843,  843,  843,  843,  843,  843,
      843,    0,  843,    0,  843,    0,  843,    0,  314,  843,

      843,  315,  843,  330,  331,  843,  767,  843,  333,  334,
      843,  335,  843,  339,  766,  340,  341,  346,  347,  351,
      350,  354,  358,  359,  762,  382,  355,  385,  391,  390,
      281,  843,    0,  739,  843,  725,    0,  736,  726,  730,
      718,  732,  726,    0,  726,  721,  718,  712,  726,  723,
      715,  715,  718,    0,  705,  712,  711,    0,    0,    0,
      705,    0,  714,  704,  707,    0,  696,  705,  697,  707,
      707,  693,  697,  703,  697,  701,  692,  695,  688,    0,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,

      843,  843,  360,  843,  843,  843,  843,  403,  404,  843,
      405,  406,  410,  411,  414,  416,  415,  424,  843,  843,
      445,  154,  238,  453,  685,  679,    0,    0,  683,  681,
        0,  689,  691,    0,  691,  678,  677,  675,  680,  652,
        0,  652,  644,  633,  634,  624,  613,  623,  615,  603,
      592,  586,    0,    0,    0,  586,    0,  578,  588,  533,
      843,  439,  843,  443,  843,  843,  447,  448,  450,  458,
      843,  431,  457,  481,  464,  487,  536,    0,  521,  525,
      527,    0,    0,    0,  523,  527,  521,  513,  519,  518,
      509,  522,  520,  512,    0,  509,  496,  494,  503,    0,

        0,  496,    0,  843,  460,  471,  478,  481,  486,  495,
      500,  490,  505,  488,    0,  490,  497,  481,  485,  454,
      441,    0,  453,    0,  429,    0,    0,  401,  399,  381,
      494,  499,  507,  514,  843,  379,  353,    0,  348,    0,
      332,  349,  344,  340,  325,    0,  307,    0,  272,  518,
      843,  517,  520,  256,  238,    0,    0,  201,    0,    0,
      197,    0,  166,  522,  525,  843,  165,  155,    0,    0,
      151,  526,  843,    0,    0,  142,  843,  103,   75,   50,
        0,  843,  573,  585,  597,  609,  617,  627,  639,  644,
      647,  649,  659,  671,  683,  695,  700,  704,  708,  714,

      716
    } ;

static yyconst flex_int16_t yy_def[502] =
    {   0,
      482,    1,  483,  483,  483,  483,  484,  484,  485,  485,
      486,  486,    1,    1,    1,    1,  482,  482,  482,  482,
      482,  482,  487,  488,  489,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  490,  482,
      482,  482,  491,  492,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  482,  482,  482,  482,  482,  493,  482,
      482,  482,  482,  482,  482,  482,  494,  482,  482,  494,
      495,  482,  482,  495,  496,  482,  482,  496,  482,  482,
      482,  487,  497,  488,  489,  489,  482,  489,  489,  489,

      489,  489,  489,  489,  489,  482,  489,  489,  489,  489,
      489,  489,  489,  489,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      490,  482,  482,  498,  499,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  482,  482,  482,  482,
      482,  482,  482,  493,  482,  482,  482,  482,  482,  482,
      482,  494,  482,  495,  482,  496,  482,  497,  489,  482,

      482,  489,  482,  489,  489,  482,  482,  482,  489,  489,
      482,  489,  482,  489,  482,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  482,  482,  482,  482,  482,  500,
      482,  482,  498,  499,  482,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  489,  482,  482,  482,  482,  489,  489,  482,
      489,  489,  489,  489,  489,  489,  489,  489,  482,  482,
      482,  501,  501,  482,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      482,  489,  482,  489,  482,  482,  489,  489,  489,  489,
      482,  482,  482,  482,  482,  482,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,

      490,  490,  490,  482,  489,  489,  489,  489,  489,  482,
      482,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      489,  489,  489,  489,  482,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  489,
      482,  489,  489,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  489,  489,  482,  490,  490,  490,  490,
      490,  489,  482,  490,  490,  490,  482,  490,  490,  490,
      490,    0,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482
    } ;

static yyconst flex_int16_t yy_nxt[925] =
    {   0,
       18,   19,   20,   19,   21,   22,   23,   24,   25,   26,
       18,   27,   28,   29,   30,   31,   32,   33,   34,   34,
       35,   36,   37,   38,   39,   39,   39,   39,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       39,   39,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   39,   39,   64,   65,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   66,   67,
       68,   70,   71,  118,   72,   70,   71,  481,   72,   70,
       71,   78,   75,   70,   71,   78,   75,   82,   82,   86,

       79,   86,  119,  143,   79,  144,   83,   83,   87,   73,
       87,  126,  120,   73,  121,  121,  121,   76,  139,  127,
      128,   76,  122,  480,  120,  123,  121,  121,  121,  136,
      140,  145,  137,  141,  122,  122,  148,  142,  152,  159,
      146,  150,  149,  124,  156,  151,  153,  122,  147,  479,
      154,  123,  157,  160,  269,  168,  158,  243,  169,   74,
      226,  226,  226,   74,   97,  170,  270,   74,  171,   80,
      244,   74,  172,   80,  200,   84,   84,   88,  478,   88,
       96,  374,  178,  178,   97,  178,  482,   98,   99,  476,
      100,  101,  102,  178,  246,   97,  482,  103,  104,  105,

      180,  374,  181,  182,  183,  475,  106,  162,  247,  199,
      474,  163,  185,  107,  471,  186,  187,  482,  108,  164,
      109,  110,  201,  165,  166,  111,  202,  112,  167,  185,
      113,  203,  186,  191,  114,  470,   97,  188,  206,   97,
       97,  208,  211,  205,  482,  213,  204,  209,   97,   97,
       97,  469,  189,  482,  188,  210,  212,  190,  482,  214,
      207,  482,  482,  482,  482,  374,   97,  482,   97,  189,
      482,  482,  482,  216,  190,  231,  231,  217,   97,  295,
      296,  224,  224,  468,  224,  374,  218,  219,  482,  227,
      482,  227,  224,  220,  228,  228,  228,  221,  231,  231,

      482,  236,  467,  222,  463,  120,  223,  121,  121,  121,
      229,  237,  230,  230,  230,  122,  281,  282,  283,  230,
      230,  251,  297,  298,  252,  292,  293,  294,  122,  230,
      230,  230,  230,  230,  230,  253,  284,  285,  299,  300,
      286,  302,  304,  305,  482,  482,  287,  306,   97,  310,
      288,  289,  290,  291,   97,   97,  303,  462,   97,   97,
      482,  482,   97,  482,  482,  482,   97,  319,  361,  482,
      482,  482,  228,  228,  228,  461,  482,  482,  460,  308,
      482,  482,  459,  312,  482,  458,  314,  457,  482,  482,
      482,  311,  309,  456,  316,  455,  317,  313,  315,  226,

      226,  226,  228,  228,  228,  323,  318,  321,  322,  322,
      322,   97,  363,   97,  365,  322,  322,  324,  366,   97,
      321,  454,   97,   97,   97,  322,  322,  322,  322,  322,
      322,  449,  371,  482,  482,  482,  482,  324,  448,  447,
      482,  482,  362,  364,  482,  482,  482,  404,  373,  373,
      373,   97,  368,  369,  482,   97,   97,  372,   97,  372,
      367,  370,  373,  373,  373,  375,   97,  375,   97,  482,
      376,  376,  376,  482,  373,  373,  373,  482,  482,   97,
      482,  376,  376,  376,  446,  406,   97,  445,  482,   97,
      482,  405,  408,  410,  435,  410,  407,  444,  411,  411,

      411,  482,   97,  409,  376,  376,  376,  451,  482,  431,
      443,  482,  411,  411,  411,   97,  482,  411,  411,  411,
      434,  432,   97,  442,  482,   97,   97,  433,  466,  482,
       97,  441,  450,  473,  477,  440,  439,  482,  438,  437,
      436,  430,  429,  428,  482,  452,  427,  482,  482,  426,
      482,  425,  482,  453,  464,  482,  482,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  465,  414,  413,
      412,  403,  472,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   93,  402,  401,  400,   93,   93,   94,  399,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   95,
      398,  397,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  131,  131,  131,  131,  134,  134,  135,  135,  184,
      396,  395,  394,  184,  184,  184,  184,  184,  184,  184,
      184,  192,  393,  192,  192,  192,  392,  192,  192,  192,
      192,  192,  192,  194,  391,  194,  194,  194,  390,  194,
      194,  194,  194,  194,  194,  196,  389,  196,  196,  196,

      388,  196,  196,  196,  196,  196,  196,  198,  198,  198,
      198,  233,  233,  233,  233,  234,  234,  234,  234,  234,
      230,  230,  230,  322,  322,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  340,  339,  338,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  235,  320,  307,  301,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,

      254,  250,  249,  248,  245,  242,  241,  240,  239,  238,
      235,  232,  225,  215,  482,  197,  195,  193,  179,  177,
      176,  175,  174,  173,  161,  155,  138,  133,  132,  130,
      129,  125,  117,  116,  115,   92,   91,  482,   90,   90,
       89,   89,   17,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482
    } ;

static yyconst flex_int16_t yy_chk[925] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,   32,    3,    4,    4,  480,    4,    5,
        5,    7,    5,    6,    6,    8,    6,    9,   10,   11,

        7,   12,   32,   49,    8,   49,    9,   10,   11,    3,
       12,   36,   33,    4,   33,   33,   33,    5,   47,   36,
       36,    6,   33,  479,   34,   33,   34,   34,   34,   45,
       47,   50,   45,   48,   34,   33,   51,   48,   53,   56,
       50,   52,   51,   33,   55,   52,   53,   34,   50,  478,
       53,   33,   55,   56,  166,   59,   55,  142,   59,    3,
      120,  120,  120,    4,   95,   59,  166,    5,   59,    7,
      142,    6,   59,    8,   98,    9,   10,   11,  476,   12,
       25,  322,   65,   65,   25,   65,   95,   25,   25,  471,
       25,   25,   25,   65,  144,   96,   98,   25,   25,   25,

       67,  322,   67,   67,   67,  468,   25,   58,  144,   96,
      467,   58,   73,   25,  463,   73,   73,   96,   25,   58,
       25,   25,   99,   58,   58,   25,   99,   25,   58,   76,
       25,  100,   76,   76,   25,  461,  101,   73,  102,  107,
      108,  103,  104,  101,   99,  105,  100,  103,  109,  110,
      111,  458,   73,  100,   76,  103,  104,   73,  101,  105,
      102,  107,  108,  103,  104,  323,  112,  105,  113,   76,
      109,  110,  111,  107,   76,  124,  124,  108,  114,  183,
      183,  114,  114,  455,  114,  323,  109,  110,  112,  122,
      113,  122,  114,  111,  122,  122,  122,  111,  231,  231,

      114,  136,  454,  112,  449,  121,  113,  121,  121,  121,
      123,  136,  123,  123,  123,  121,  180,  180,  180,  123,
      123,  149,  199,  202,  149,  182,  182,  182,  121,  123,
      123,  123,  123,  123,  123,  149,  181,  181,  204,  205,
      181,  209,  210,  212,  199,  202,  181,  214,  216,  217,
      181,  181,  181,  181,  218,  219,  209,  447,  221,  220,
      204,  205,  222,  209,  210,  212,  223,  224,  303,  214,
      216,  217,  227,  227,  227,  445,  218,  219,  444,  216,
      221,  220,  443,  218,  222,  442,  220,  441,  223,  224,
      303,  217,  216,  439,  221,  437,  222,  219,  220,  226,

      226,  226,  228,  228,  228,  230,  223,  226,  229,  229,
      229,  308,  309,  311,  312,  229,  229,  230,  313,  314,
      226,  436,  315,  317,  316,  229,  229,  229,  229,  229,
      229,  430,  318,  308,  309,  311,  312,  230,  429,  428,
      313,  314,  308,  311,  315,  317,  316,  362,  372,  372,
      372,  364,  315,  316,  318,  367,  368,  321,  369,  321,
      314,  317,  321,  321,  321,  324,  370,  324,  405,  362,
      324,  324,  324,  364,  373,  373,  373,  367,  368,  406,
      369,  375,  375,  375,  425,  367,  407,  423,  370,  408,
      405,  364,  369,  374,  409,  374,  368,  421,  374,  374,

      374,  406,  431,  370,  376,  376,  376,  432,  407,  405,
      420,  408,  410,  410,  410,  433,  409,  411,  411,  411,
      408,  406,  434,  419,  431,  452,  450,  407,  453,  432,
      464,  418,  431,  465,  472,  417,  416,  433,  414,  413,
      412,  402,  399,  398,  434,  433,  397,  452,  450,  396,
      453,  394,  464,  434,  450,  465,  472,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  381,  452,  380,  379,
      377,  360,  464,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  486,
      486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  487,  359,  358,  356,  487,  487,  488,  352,  488,
      488,  488,  488,  488,  488,  488,  488,  488,  488,  489,
      351,  350,  489,  489,  489,  489,  489,  489,  489,  489,
      489,  490,  490,  490,  490,  491,  491,  492,  492,  493,
      349,  348,  347,  493,  493,  493,  493,  493,  493,  493,
      493,  494,  346,  494,  494,  494,  345,  494,  494,  494,
      494,  494,  494,  495,  344,  495,  495,  495,  343,  495,
      495,  495,  495,  495,  495,  496,  342,  496,  496,  496,

      340,  496,  496,  496,  496,  496,  496,  497,  497,  497,
      497,  498,  498,  498,  498,  499,  499,  499,  499,  499,
      500,  500,  500,  501,  501,  339,  338,  337,  336,  335,
      333,  332,  330,  329,  326,  325,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  265,
      264,  263,  261,  257,  256,  255,  253,  252,  251,  250,
      249,  248,  247,  246,  245,  243,  242,  241,  240,  239,
      238,  236,  234,  225,  215,  207,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  155,  154,  153,  152,  151,

      150,  147,  146,  145,  143,  141,  140,  139,  138,  137,
      135,  126,  118,  106,   92,   87,   83,   79,   66,   64,
       63,   62,   61,   60,   57,   54,   46,   41,   40,   38,
       37,   35,   31,   30,   28,   23,   21,   17,   16,   15,
       14,   13,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,

      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <guido.tack@monash.edu>
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
#if defined __GNUC__
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wdeprecated"
#elif defined _MSC_VER
#pragma warning(push, 1)
#endif

namespace MiniZinc{ class Location; }
#define YYLTYPE MiniZinc::Location
#define YYLTYPE_IS_DECLARED 1
#define YYLTYPE_IS_TRIVIAL 0

#include <minizinc/parser.hh>

int yy_input_proc(char* buf, int size, yyscan_t yyscanner);
#define YY_INPUT(buf, result, max_size) \
  result = yy_input_proc(buf, max_size, yyscanner);

#define YY_USER_ACTION \
  { MiniZinc::ParserState* parm =  \
    static_cast<MiniZinc::ParserState*>(yyget_extra(yyscanner)); \
    yylloc->first_line = yylloc->last_line = parm->lineno; \
  }

bool hexstrtointval(const char* s, long long int& v) {
  std::istringstream iss(s);
  iss >> std::hex >> v;
  return !iss.fail();
}

bool octstrtointval(const char* s, long long int& v) {
  std::istringstream iss(s);
  iss >> std::oct >> v;
  return !iss.fail();
}

bool fast_strtointval(const char* s, long long int& v) {
  MiniZinc::IntVal x = 0;
  try {
    for (; *s != '\0'; ++s) {
      x = (x*10) + (*s - '0');
    }
  } catch (MiniZinc::ArithmeticError&) {
    return false;
  }
  v = x.toInt();
  return true;
}

bool strtofloatval(const char* s, double& v) {
  std::istringstream iss(s);
  iss >> v;
  return !iss.fail();
}

void beginToken(void* parm, YYLTYPE* yyloc, char* t) {
  MiniZinc::ParserState* pp =
    static_cast<MiniZinc::ParserState*>(parm);
  int tokenLength = strlen(t);
  yyloc->first_column = pp->nTokenNextStart;
  pp->nTokenNextStart += tokenLength;
  yyloc->last_column = pp->nTokenNextStart-1;
}

void clearBuffer(void* parm) {
  MiniZinc::ParserState* pp =
    static_cast<MiniZinc::ParserState*>(parm);
  pp->stringBuffer = "";
}

void appendBufferString(void* parm, const char* s) {
  MiniZinc::ParserState* pp =
  static_cast<MiniZinc::ParserState*>(parm);
  pp->stringBuffer += s;
}

void appendBufferChar(void* parm, char s) {
  MiniZinc::ParserState* pp =
  static_cast<MiniZinc::ParserState*>(parm);
  pp->stringBuffer += s;
}

char* bufferData(void* parm) {
  MiniZinc::ParserState* pp =
    static_cast<MiniZinc::ParserState*>(parm);
  return strdup(pp->stringBuffer.c_str());
}

#define INITIAL 0
#define string 1
#define string_quote 2
#define multilinecomment 3
#define doccomment 4
#define doccomment_file 5
#define bracket_exp 6
#define quoted_exp 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *yyget_lloc (yyscan_t yyscanner );
    
        void yyset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 483 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 843 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); return MZN_INVALID_NULL; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
{ MiniZinc::ParserState* parm =
                      static_cast<MiniZinc::ParserState*>(
                        yyget_extra(yyscanner));
                    parm->lineno++;
                    parm->lineStartPos += parm->nTokenNextStart;
                    parm->nTokenNextStart=1;
                  }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ /* ignore whitespace */
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                  }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ yy_push_state(doccomment,yyscanner); beginToken(yyget_extra(yyscanner), yylloc, yytext); clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK

case 5:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); yylval->sValue = bufferData(yyget_extra(yyscanner));
                    yy_pop_state(yyscanner); return MZN_DOC_COMMENT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
{ MiniZinc::ParserState* parm =
    static_cast<MiniZinc::ParserState*>(
    yyget_extra(yyscanner));
    parm->lineno++;
    parm->lineStartPos += parm->nTokenNextStart;
    parm->nTokenNextStart=1;
    appendBufferString(yyget_extra(yyscanner), yytext);
  }
	YY_BREAK

case 9:
YY_RULE_SETUP
{ yy_push_state(doccomment_file,yyscanner); beginToken(yyget_extra(yyscanner), yylloc, yytext); clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK

case 10:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); yylval->sValue = bufferData(yyget_extra(yyscanner));
    yy_pop_state(yyscanner); return MZN_DOC_FILE_COMMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{ MiniZinc::ParserState* parm =
    static_cast<MiniZinc::ParserState*>(
    yyget_extra(yyscanner));
    parm->lineno++;
    parm->lineStartPos += parm->nTokenNextStart;
    parm->nTokenNextStart=1;
    appendBufferString(yyget_extra(yyscanner), yytext);
  }
	YY_BREAK

case 14:
YY_RULE_SETUP
{ yy_push_state(multilinecomment,yyscanner); beginToken(yyget_extra(yyscanner), yylloc, yytext); }
	YY_BREAK

case 15:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); yy_pop_state(yyscanner); }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
{ MiniZinc::ParserState* parm =
    static_cast<MiniZinc::ParserState*>(
    yyget_extra(yyscanner));
    parm->lineno++;
    parm->lineStartPos += parm->nTokenNextStart;
    parm->nTokenNextStart=1;
  }
	YY_BREAK

case 19:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LEFT_BRACKET; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LEFT_2D_BRACKET; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_RIGHT_BRACKET; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_RIGHT_2D_BRACKET; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    /* ignore comments */ }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->iValue = 1; return MZN_BOOL_LITERAL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->iValue = 0; return MZN_BOOL_LITERAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                  if (strtofloatval(yytext, yylval->dValue))
                  return MZN_FLOAT_LITERAL;
                  else
                  return MZN_INVALID_FLOAT_LITERAL;
                }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    if (hexstrtointval(yytext+2, yylval->iValue))
                      return MZN_INTEGER_LITERAL;
                    else
                      return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                  if (octstrtointval(yytext+2, yylval->iValue))
                    return MZN_INTEGER_LITERAL;
                  else
                    return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                  if (fast_strtointval(yytext, yylval->iValue))
                    return MZN_INTEGER_LITERAL;
                  else
                    return MZN_INVALID_INTEGER_LITERAL;
                }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                  if (strtofloatval(yytext, yylval->dValue))
                  return MZN_FLOAT_LITERAL;
                  else
                  return MZN_INVALID_FLOAT_LITERAL;
                }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    if (strtofloatval(yytext, yylval->dValue))
                      return MZN_FLOAT_LITERAL;
                    else
                      return MZN_INVALID_FLOAT_LITERAL;
                  }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    if (strtofloatval(yytext, yylval->dValue))
                      return MZN_FLOAT_LITERAL;
                    else
                      return MZN_INVALID_FLOAT_LITERAL;
                  }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return *yytext; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_DOTDOT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_DOTDOT_QUOTED; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_COLONCOLON; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_UNDERSCORE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ANN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ANNOTATION; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ANY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ARRAY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_BOOL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_CASE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_CONSTRAINT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_DEFAULT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_IDIV; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_IDIV_QUOTED; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_DIFF; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_DIFF_QUOTED; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ELSE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ELSEIF; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ENDIF; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ENUM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_FLOAT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_FUNCTION; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_IF; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_INCLUDE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_INFINITY;
                  }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_INTERSECT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_INTERSECT_QUOTED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_IN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_IN_QUOTED; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_INT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LET; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LIST; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->bValue = false; return MZN_MAXIMIZE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->bValue = true; return MZN_MINIMIZE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_MOD; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_MOD_QUOTED; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_NOT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_NOT_QUOTED; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_OF; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_OUTPUT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_OPT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_PAR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_PREDICATE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_RECORD; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SATISFY; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SET; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SOLVE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_STRING; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SUBSET; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SUBSET_QUOTED; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SUPERSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SUPERSET_QUOTED; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SYMDIFF; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_SYMDIFF_QUOTED; }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_TEST; }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_THEN; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_TUPLE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_TYPE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_UNION; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_UNION_QUOTED; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_VAR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_VARIANT_RECORD; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_WHERE; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_XOR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_XOR_QUOTED; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_PLUS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_PLUS_QUOTED; }
	YY_BREAK
case 101:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_MINUS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_MINUS_QUOTED; }
	YY_BREAK
case 103:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_MULT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_MULT_QUOTED; }
	YY_BREAK
case 105:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_DIV; }
	YY_BREAK
case 106:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_DIV_QUOTED; }
	YY_BREAK
case 107:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_PLUSPLUS; }
	YY_BREAK
case 108:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_PLUSPLUS_QUOTED; }
	YY_BREAK
case 109:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_ABSENT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LE_QUOTED; }
	YY_BREAK
case 112:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LQ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_LQ_QUOTED; }
	YY_BREAK
case 114:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_GR; }
	YY_BREAK
case 115:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_GR_QUOTED; }
	YY_BREAK
case 116:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_GQ; }
	YY_BREAK
case 117:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_GQ_QUOTED; }
	YY_BREAK
case 118:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_EQ; }
	YY_BREAK
case 119:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_EQ_QUOTED; }
	YY_BREAK
case 120:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_EQ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_EQ_QUOTED; }
	YY_BREAK
case 122:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_NQ; }
	YY_BREAK
case 123:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_NQ_QUOTED; }
	YY_BREAK
case 124:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_IMPL; }
	YY_BREAK
case 125:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_IMPL_QUOTED; }
	YY_BREAK
case 126:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_RIMPL; }
	YY_BREAK
case 127:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_RIMPL_QUOTED; }
	YY_BREAK
case 128:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_EQUIV; }
	YY_BREAK
case 129:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_EQUIV_QUOTED; }
	YY_BREAK
case 130:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_OR; }
	YY_BREAK
case 131:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_OR_QUOTED; }
	YY_BREAK
case 132:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_AND; }
	YY_BREAK
case 133:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return MZN_AND_QUOTED; }
	YY_BREAK
case 134:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->sValue = strdup(yytext);
                    return MZN_QUOTED_IDENTIFIER; }
	YY_BREAK
case 135:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0;
                    return MZN_IDENTIFIER; }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->sValue = strdup(yytext); return MZN_IDENTIFIER; }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    MiniZinc::ParserState* parm =
                    static_cast<MiniZinc::ParserState*>(yyget_extra(yyscanner));
                    if (parm->isFlatZinc) {
                      yylval->sValue = strdup(yytext); return MZN_IDENTIFIER;
                    } else {
                      return FLATZINC_IDENTIFIER;
                    }
                    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{ yylval->sValue = strdup("forall"); return MZN_IDENTIFIER; }
	YY_BREAK
case 140:
YY_RULE_SETUP
{ yylval->sValue = strdup("exists"); return MZN_IDENTIFIER; }
	YY_BREAK
case 141:
YY_RULE_SETUP
{ return MZN_IN; }
	YY_BREAK
case 142:
YY_RULE_SETUP
{ return MZN_SUBSET; }
	YY_BREAK
case 143:
YY_RULE_SETUP
{ return MZN_SUPERSET; }
	YY_BREAK
case 144:
YY_RULE_SETUP
{ return MZN_INFINITY; }
	YY_BREAK
case 145:
YY_RULE_SETUP
{ return MZN_NOT; }
	YY_BREAK
case 146:
YY_RULE_SETUP
{ return MZN_RIMPL; }
	YY_BREAK
case 147:
YY_RULE_SETUP
{ return MZN_IMPL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
{ return MZN_EQUIV; }
	YY_BREAK
case 149:
YY_RULE_SETUP
{ return MZN_AND; }
	YY_BREAK
case 150:
YY_RULE_SETUP
{ return MZN_OR; }
	YY_BREAK
case 151:
YY_RULE_SETUP
{ return MZN_NQ; }
	YY_BREAK
case 152:
YY_RULE_SETUP
{ return MZN_LQ; }
	YY_BREAK
case 153:
YY_RULE_SETUP
{ return MZN_GQ; }
	YY_BREAK
case 154:
YY_RULE_SETUP
{ return MZN_UNION; }
	YY_BREAK
case 155:
YY_RULE_SETUP
{ return MZN_INTERSECT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->sValue = strdup(yytext+1); return MZN_TI_IDENTIFIER; }
	YY_BREAK
case 157:
YY_RULE_SETUP
{ yy_push_state(bracket_exp,yyscanner); beginToken(yyget_extra(yyscanner), yylloc, yytext); return *yytext; }
	YY_BREAK
case 158:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); beginToken(yyget_extra(yyscanner), yylloc, yytext); return *yytext; }
	YY_BREAK
case 159:
YY_RULE_SETUP
{ yy_pop_state(yyscanner); yy_pop_state(yyscanner); yy_push_state(string_quote,yyscanner);
                  beginToken(yyget_extra(yyscanner), yylloc, yytext); clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK
case 160:
YY_RULE_SETUP
{ yy_push_state(string,yyscanner); beginToken(yyget_extra(yyscanner), yylloc, yytext); clearBuffer(yyget_extra(yyscanner)); }
	YY_BREAK
case 161:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferString(yyget_extra(yyscanner), yytext); }
	YY_BREAK
case 162:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferChar(yyget_extra(yyscanner), '\n'); }
	YY_BREAK
case 163:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferChar(yyget_extra(yyscanner), '\t'); }
	YY_BREAK
case 164:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferChar(yyget_extra(yyscanner), yytext[1]); }
	YY_BREAK
case 165:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); appendBufferChar(yyget_extra(yyscanner), yytext[1]); }
	YY_BREAK
case 166:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); yylval->sValue = bufferData(yyget_extra(yyscanner));
                      yy_push_state(quoted_exp,yyscanner); return MZN_STRING_QUOTE_START; }
	YY_BREAK
case 167:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); yylval->sValue = bufferData(yyget_extra(yyscanner));
                      yy_push_state(quoted_exp,yyscanner); return MZN_STRING_QUOTE_MID; }
	YY_BREAK
case 168:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); yylval->sValue = bufferData(yyget_extra(yyscanner));
                      yy_pop_state(yyscanner); return MZN_STRING_LITERAL; }
	YY_BREAK
case 169:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); yylval->sValue = bufferData(yyget_extra(yyscanner));
                            yy_pop_state(yyscanner); return MZN_STRING_QUOTE_END; }
	YY_BREAK
case 170:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext); return (unsigned char)yytext[0]; }
	YY_BREAK
case YY_STATE_EOF(string):
case YY_STATE_EOF(string_quote):
{ yy_pop_state(yyscanner); beginToken(yyget_extra(yyscanner), yylloc, yytext); return MZN_UNTERMINATED_STRING; }
	YY_BREAK
case 171:
YY_RULE_SETUP
{
                    beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0; 
                    return MZN_QUOTED_IDENTIFIER; }
	YY_BREAK
case 172:
YY_RULE_SETUP
{ beginToken(yyget_extra(yyscanner), yylloc, yytext);
                    return (unsigned char)yytext[0]; }
	YY_BREAK
case 173:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(multilinecomment):
case YY_STATE_EOF(doccomment):
case YY_STATE_EOF(doccomment_file):
case YY_STATE_EOF(bracket_exp):
case YY_STATE_EOF(quoted_exp):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 81);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 483 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 81;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 483 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 482);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yy_input_proc(char* buf, int size, yyscan_t yyscanner) {
  MiniZinc::ParserState* parm = 
    static_cast<MiniZinc::ParserState*>(yyget_extra(yyscanner));
  return parm->fillBuffer(buf, size);
  // work around warning that yyunput is unused
  yyunput (0,buf,yyscanner);
}

