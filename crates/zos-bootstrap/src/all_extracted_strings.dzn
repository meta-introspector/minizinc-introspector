extracted_strings = [
    "constants",
    "crates/zos-bootstrap/src/constants.rs",
    "extracted_strings = [
",
    "\"",
    "\\"",
    ",
",
    "
",
    "];
",
    "array[int] of string: extracted_strings;
int: num_strings = length(extracted_strings);

% Decision variable: which string to select
var 1..num_strings: selected_index;

% The selected string
string: selected_string = extracted_strings[selected_index];

solve satisfy;

output [\"selected_string = \", selected_string, \"\n\"];
",
    "mkdir",
    "-DBUILD_C_WRAPPER=ON",
    "cmake",
    " Builds all core components (Gecode, libminizinc, FFI)",
    " Builds Gecode",
    " Builds libminizinc",
    " Builds the C++ FFI wrapper",
    " Builds the Rust FFI crate",
    " Generates FFI header declarations",
    " Sets up MiniZinc solver configurations",
    " Builds libminizinc with coverage instrumentation",
    "mkdir",
    "mkdir",
    "-DBUILD_C_WRAPPER=ON",
    "-DBUILD_C_WRAPPER=ON",
    "cmake",
    "cmake",
    "minizinc_c_wrapper",
    "minizinc_c_wrapper",
    "-f",
    "-f",
    "-o",
    "-o",
    "make_strace.log",
    "make_strace.log",
    "make",
    "make",
    "strace",
    "strace",
    "libminizinc_c_wrapper.so",
    "libminizinc_c_wrapper.so",
    " Builds all core components (Gecode, libminizinc, FFI)",
    " Builds all core components (Gecode, libminizinc, FFI)",
    " Builds Gecode",
    " Builds Gecode",
    " Builds libminizinc",
    " Builds libminizinc",
    " Builds the C++ FFI wrapper",
    " Builds the C++ FFI wrapper",
    " Builds the Rust FFI crate",
    " Builds the Rust FFI crate",
    " Generates FFI header declarations",
    " Generates FFI header declarations",
    " Sets up MiniZinc solver configurations",
    " Sets up MiniZinc solver configurations",
    " Builds libminizinc with coverage instrumentation",
    " Builds libminizinc with coverage instrumentation",
    "-B",
    "-B",
    ".",
    ".",
    "str",
    "str",
    "String",
    "String",
    " Cleans all build artifacts",
    " Cleans all build artifacts",
    " Cleans the main build directory",
    " Cleans the main build directory",
    " Cleans the coverage build directory",
    " Cleans the coverage build directory",
    " Cleans generated proof tapes",
    " Cleans generated proof tapes",
    "LD_LIBRARY_PATH",
    "LD_LIBRARY_PATH",
    "_coverage",
    "_coverage",
    " Cleans all build artifacts",
    " Cleans the main build directory",
    " Cleans the coverage build directory",
    " Cleans generated proof tapes",
    " Attempts to reproduce a known FFI crash",
    " Attempts to reproduce a specific FFI bug",
    " Runs focused v7 debug tests",
    "LD_LIBRARY_PATH",
    "cargo",
    "test",
    "--package",
    "minizinc_ffi",
    "LD_LIBRARY_PATH",
    "cargo",
    "test",
    "--package",
    "minizinc_ffi",
    "--",
    "--nocapture",
    "tools",
    "minizinc_test_runner_rs",
    "target",
    "release",
    "minizinc_test_runner_rs",
    "unknown_crate",
    "minizinc_models",
    "minizinc_data",
    "extract_constants.mzn",
    "raw_strings_data.dzn",
    "minizinc",
    "\",
    "\\",
    "/",
    "\/",
    "&",
    "\&",
    "[",
    "\[",
    "]",
    "\]",
    "(",
    "\(",
    ")",
    "\)",
    "{{",
    "\{{",
    "}}",
    "\}}",
    "<",
    "\<",
    ">",
    "\>",
    "|",
    "\|",
    "$",
    "\$",
    "^",
    "\^",
    ".",
    "\.",
    "*",
    "\*",
    "+",
    "\+",
    "?",
    "\?",
    "
",
    "\n",
    "",
    "\r",
    "	",
    "\t",
    "unknown_crate",
    "all_extracted_strings.dzn",
    "minizinc",
    "minizinc_models",
    "select_needed_constants.mzn",
    "selected_constants = [",
    "];",
    ",",
    "// This file is auto-generated by zos-bootstrap
",
    "// Do not edit this file manually

",
    "manual_input",
    "unknown_crate",
    "extracted_strings.dzn",
    "select_string.mzn",
    "minizinc",
    "selected_string = \"",
    "\";",
    "minizinc_models",
    "minizinc_data",
    "proof_tapes",
    "%Y%m%d_%H%M%S",
    "minizinc",
    "minizinc_models",
    "minizinc_data",
    "minizinc",
    "tools",
    "minizinc_test_runner_rs",
    "target",
    "release",
    "minizinc_test_runner_rs",
    " Runs the embedding model with proof tape",
    " Runs a MiniZinc model minimally (for quick debug)",
    " Runs the MiniZinc test driver (generates DZN, runs model)",
    "Either --vector-params-version or --num-vec must be provided, but not both.",
    "%Y%m%d_%H%M%S",
    "mkdir",
    "-p",
    "version_vector.txt",
    "minizinc",
    "full_output.log",
    "stderr.log",
    " Runs all tests (C ABI, Rust FFI, MiniZinc models)",
    " Runs the standalone C ABI test",
    " Runs the Rust FFI tests",
    " Runs the full MiniZinc model test suite",
    " Generates and verifies DZN data",
    " Tests the Rust DZN generator",
    " Runs Rust FFI tests for C++ coverage data generation",
    "c_abi_test",
    "mkdir",
    "-p",
    "test_c_abi.cpp",
    "-o",
    "test_c_abi",
    "mkdir stdout: {}",
    "mkdir stdout: {}",
    "mkdir stderr: {}",
    "mkdir stderr: {}",
    "build",
    "build",
    "-DBUILD_C_WRAPPER=ON",
    "-DBUILD_C_WRAPPER=ON",
    "-DCMAKE_BUILD_TYPE=Debug",
    "-DCMAKE_BUILD_TYPE=Debug",
    "-DCMAKE_CXX_FLAGS=\"--coverage\"",
    "-DCMAKE_CXX_FLAGS=\"--coverage\"",
    "-DCMAKE_C_FLAGS=\"--coverage\"",
    "-DCMAKE_C_FLAGS=\"--coverage\"",
    "-DCMAKE_POLICY_VERSION_MINIMUM=3.5",
    "-DCMAKE_POLICY_VERSION_MINIMUM=3.5",
    "-DGecode_ROOT={}",
    "-DGecode_ROOT={}",
    "-C",
    "-C",
    "-p",
    "-p",
    "--release",
    "--release",
    "Pre-condition failed: build_dir does not exist after mkdir.",
    "Pre-condition failed: build_dir does not exist after mkdir.",
    "Post-condition failed: libminizinc_c_wrapper.so not found after build.",
    "Post-condition failed: libminizinc_c_wrapper.so not found after build.",
    "cargo",
    "cargo",
    "libminizinc_c_wrapper.so",
    "libminizinc_c_wrapper.so",
    "All core components built successfully.",
    "All core components built successfully.",
    "Building libminizinc with coverage instrumentation...",
    "Building libminizinc with coverage instrumentation...",
    "Building C++ FFI wrapper...",
    "Building C++ FFI wrapper...",
    "Building Gecode...",
    "Building Gecode...",
    "Building libminizinc...",
    "Building libminizinc...",
    "Building Rust FFI crate...",
    "Building Rust FFI crate...",
    "Build Dir: {}",
    "Build Dir: {}",
    "Checking for library at: {}",
    "Checking for library at: {}",
    "cmake command: cmake {} in dir {}",
    "cmake command: cmake {} in dir {}",
    "cmake command executed.",
    "cmake command executed.",
    "Ensuring build_dir exists...",
    "Ensuring build_dir exists...",
    "FFI header declarations generated successfully.",
    "FFI header declarations generated successfully.",
    "C++ FFI wrapper built successfully.",
    "C++ FFI wrapper built successfully.",
    "--- Finished build_ffi_wrapper ---",
    "--- Finished build_ffi_wrapper ---",
    "Gecode built successfully.",
    "Gecode built successfully.",
    "Generating FFI header declarations...",
    "Generating FFI header declarations...",
    "libminizinc built successfully.",
    "libminizinc built successfully.",
    "libminizinc built with coverage instrumentation successfully.",
    "libminizinc built with coverage instrumentation successfully.",
    "make command: make {} in dir {}",
    "make command: make {} in dir {}",
    "make command executed.",
    "make command executed.",
    "minizinc_ffi_crate_dir: {}",
    "minizinc_ffi_crate_dir: {}",
    "mkdir command executed.",
    "mkdir command executed.",
    "No build command provided. Use --help for more information.",
    "No build command provided. Use --help for more information.",
    "Post-condition met: libminizinc_c_wrapper.so found.",
    "Post-condition met: libminizinc_c_wrapper.so found.",
    "Pre-condition met: build_dir exists.",
    "Pre-condition met: build_dir exists.",
    "Project Root: {}",
    "Project Root: {}",
    "Running cmake...",
    "Running cmake...",
    "Running make command...",
    "Running make command...",
    "Rust FFI crate built successfully.",
    "Rust FFI crate built successfully.",
    "Setting up MiniZinc solver configurations...",
    "Setting up MiniZinc solver configurations...",
    "MiniZinc solver configurations set up successfully.",
    "MiniZinc solver configurations set up successfully.",
    "--- Starting build_ffi_wrapper ---",
    "--- Starting build_ffi_wrapper ---",
    "generate_ffi_declarations.sh",
    "generate_ffi_declarations.sh",
    "setup_minizinc_solvers.sh",
    "setup_minizinc_solvers.sh",
    "minizinc_c_wrapper",
    "minizinc_c_wrapper",
    "Building all core components...",
    "Building all core components...",
    " Builds project components",
    " Runs project tests",
    " Executes MiniZinc models",
    " Provides debugging utilities",
    " Cleans build artifacts",
    " Extracts constant strings from the codebase using MiniZinc",
    " Generates MiniZinc parameters from extracted constants",
    " Generates constants.rs file based on MiniZinc proof",
    " Bootstraps the entire ZOS system",
    " The specific bootstrap target (e.g., \"zos\")",
    "zos",
    "build",
    "vendor",
    "gecode",
    "build",
    "vendor",
    "gecode",
    "minizinc_models",
    "minizinc_data",
    "tools",
    "minizinc_c_wrapper_refactored",
    "tools",
    "minizinc_ffi",
    "proof_tapes",
    "Home directory not found",
    ".minizinc",
    "solvers"
];
