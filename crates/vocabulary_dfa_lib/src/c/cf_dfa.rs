use regex::Regex;

pub fn matches_cf(text: &str) -> bool {
    let pattern = r"^(cf_absolute_time|cf_break|cf_break_variant|cf_continue|cf_continue_variant|cf_descriptor|cf_descriptors|cf_expr|cf_expr_collector|cf_expr_span|cf_handle|cf_hdrop|cf_key_span|cf_options|cf_path|cf_paths|cf_range|cf_rocksdb_metrics|cf_true|cf_type|cf_unicodetext|cf_url|cfabsolutetime|cfallocatorref|cfarrayappendarray|cfarrayappendvalue|cfarraycreatemutable|cfarraygetcount|cfarraygetvalueatindex|cfboolean|cfbundle_identifier|cfbundle_short_version_string|cfbundle_version|cfbundleidentifier|cfbundleinfodictionaryversion|cfbundlename|cfbundlepackagetype|cfbundleversion|cfdata|cfdatagetbyteptr|cfdataref|cfdateformattercreate|cfdateformattercreatestringwithabsolutetime|cfdateformatterref|cfdictionarycreate|cfexprcollector|cfformat|cfg1b_v0_1|cfg_|cfg_1|cfg_aliases|cfg_all|cfg_any|cfg_atom_1|cfg_attr_attr_macro|cfg_attr_lint_attrs|cfg_b|cfg_booleans|cfg_booleans_combinators|cfg_booleans_config|cfg_booleans_not|cfg_booleans_rustflags_no_effect|cfg_c|cfg_cache|cfg_clblast|cfg_conditioned|cfg_conflict|cfg_content|cfg_cublas|cfg_d|cfg_dep|cfg_derive_tokens|cfg_diagnostics|cfg_doc|cfg_e|cfg_easy|cfg_env_vars_available|cfg_evaluated_before_attr_macros|cfg_expand|cfg_expr_bad|cfg_extend|cfg_feedback|cfg_file|cfg_first_trait_param_16141|cfg_fn|cfg_from_attr|cfg_gated_const|cfg_gated_func|cfg_group|cfg_groups|cfg_handling|cfg_ignored_fields|cfg_impl_def|cfg_in_module_file|cfg_included|cfg_key|cfg_keywords|cfg_let_and_return|cfg_loc|cfg_looks_at_rustflags_for_target|cfg_map|cfg_match|cfg_matches|cfg_metal|cfg_method_a|cfg_method_not_a|cfg_mod|cfg_mod_a|cfg_mod_b|cfg_name|cfg_norm|cfg_not_test_info|cfg_omit_git_hash|cfg_omitted|cfg_opt|cfg_overflow_checks|cfg_override|cfg_override_doc|cfg_override_test|cfg_params|cfg_raw_idents|cfg_raw_idents_empty|cfg_raw_idents_not_really|cfg_relocation_model|cfg_return|cfg_rustflags|cfg_rustflags_normal_source|cfg_rustflags_precedence|cfg_sanitize|cfg_sanitizer_cfi|cfg_select_expand|cfg_set_test|cfg_settest|cfg_stack|cfg_strs|cfg_syntax|cfg_syntax_bad|cfg_tail|cfg_tails|cfg_target_compact|cfg_target_endian|cfg_target_has_atomic|cfg_target_has_atomic_equal_alignment|cfg_target_has_atomic_load_store|cfg_target_thread_local|cfg_test_even_with_no_harness|cfg_test_module|cfg_the_entire_crate|cfg_true_false|cfg_ub_checks|cfg_ver_description|cfg_version|cfg_warn|cfgaccessible|cfgd_out_assoc_items|cfgd_out_call_arguments|cfgd_out_fn_params|cfged_lint_attrs|cfgeval|cfgexprstage|cfggatedenum|cfggatedfieldsstruct|cfggatedgenerictrait|cfggatedstruct|cfglist|cfglogctx|cfgs_between_fields|cfgs_bytes_option|cfgs_slice|cfgs_str_iter|cfgs_vec|cfgselect|cfgt|cfi|cfi_encoding|cfk1hrcny8jjuaay8pb2gjlfndcths2qwzne3izzbmgn|cflags|cfloat|cfloatsize|cflocalecopycurrent|cflocalecopypreferredlanguages|cflocaleref|cfmutablearrayref|cfmutableattributedstring|cfmutabledictionary|cfn|cfrange|cfrunloopgetcurrent|cfrunloopref|cfrunloopstop|cfs_candidatepos|cfs_point|cftypeid|cftyperef|cfurlcopyfilesystempath|cfurlcreatefromfilesystemrepresentation|cfurlcreatewithbytes|cfurlsetresourcepropertyforkey|cfuuid|cfuuidgetuuidbytes|cfuuidref)$";
    let re = Regex::new(pattern).unwrap();
    re.is_match(text)
}
