use regex::Regex;

pub fn matches_by(text: &str) -> bool {
    let pattern = r"^(by_channel|by_chapter|by_crate|by_feature|by_fn|by_github_login|by_handle_file_information|by_hir|by_host|by_keys|by_macro|by_mut_ref|by_mut_ref_test|by_page|by_params|by_pid|by_prefix|by_proc|by_provider|by_ref_mut|by_ref_test|by_rule_id|by_self|by_signature|by_source|by_uid|by_user|by_user_analytics|by_value|by_value_self|by_vector|by_version|by_vip|bycblsepxsxixgux2wzcfzrjqjp0l|bychapter|bycopy|bycvckakjjqim7e2j6vg08ricy8qp|bydate|bye_bugs|bye_cat|bylatency|byobnet|byorder|bypage|bypass_account_age_check|bypass_value|bypass_vector_index|bypassed|byproduct|byprovider|byref_ident|bytag|byte0|byte1|byte10|byte11|byte12|byte13|byte14|byte15|byte2|byte3|byte4|byte5|byte6|byte7|byte8|byte9|byte_atoms|byte_buf|byte_buffer|byte_char_slices_info|byte_chunk|byte_column|byte_file|byte_from|byte_from_response|byte_hasher|byte_headers|byte_index_methods|byte_ix|byte_level|byte_level_decoder|byte_level_post|byte_level_pre|byte_limit_for_scan|byte_limit_for_scans|byte_literal|byte_offsets|byte_order|byte_pair_encode|byte_pos|byte_range_end|byte_range_path|byte_range_start|byte_ranges|byte_reversed|byte_reversed_mirror|byte_str|byte_stream|byte_string_literal|byte_sum|byte_sym|byte_to|byte_to_ip|byte_type|byte_unescaped_quote|byte_unit|byte_view|byte_written|byteaddressparse|bytearray|bytearrayb64|bytearraytype|byteblockencoder|byteblockreader|byteblockwriter|bytebufb64|bytechunks|bytecode_lambda|bytehasher|bytelength|bytelevel|byteliteral|bytepos_to_file_charpos|byterecordsintoiter|bytereversed|bytes1kb|bytes3|bytes4|bytes6|bytes_after_first_selection|bytes_after_last_selection|bytes_ancient_created|bytes_append|bytes_append_definition|bytes_arg|bytes_base64|bytes_before_first_selection|bytes_before_last_selection|bytes_before_version|bytes_clear|bytes_clear_definition|bytes_code|bytes_col|bytes_collector|bytes_column_opt|bytes_columns|bytes_consumed|bytes_count_to_len_info|bytes_decode|bytes_definition|bytes_encode|bytes_entry|bytes_err|bytes_field_hash_map|bytes_filter|bytes_filter_with_encoding|bytes_from_must_shrink|bytes_from_newest_storages|bytes_from_nibbles_32|bytes_from_smallest_storages|bytes_id|bytes_in_first_chunk|bytes_in_second_chunk|bytes_length|bytes_length_definition|bytes_limit|bytes_mut|bytes_new|bytes_not_indexed|bytes_nth_info|bytes_of_slice|bytes_of_slice_mut|bytes_offset|bytes_ok|bytes_on_disk|bytes_overflow|bytes_per_element|bytes_per_image|bytes_per_interval|bytes_per_second|bytes_per_token_estimate|bytes_per_token_guess|bytes_primary|bytes_push|bytes_push_definition|bytes_read_this_call|bytes_read_this_time|bytes_recv|bytes_ref|bytes_ref_definition|bytes_remaining_this_slot|bytes_remaining_to_write|bytes_removed|bytes_required|bytes_saved|bytes_score_field|bytes_sent|bytes_sent_for_batching|bytes_sent_to_consumer|bytes_set|bytes_set_definition|bytes_slice|bytes_strategy|bytes_subset|bytes_term|bytes_text|bytes_to_align|bytes_to_fill_erasure_batch|bytes_to_hash|bytes_to_list|bytes_to_list_definition|bytes_to_shrink_due_to_ratio|bytes_to_store|bytes_to_str|bytes_to_string|bytes_to_string_definition|bytes_to_transfer|bytes_total_with_this_slot|bytes_transferred|bytes_truncated|bytes_tx|bytes_val|bytes_vec|byteschainbody|bytescounter|bytesdecode|bytesencode|bytesequence|bytesfastfieldsegmentcollector|bytesfastfieldtestcollector|bytesfiltersegmentcollector|bytesize|bytesliteral|bytesoptionsdeser|bytesref|bytesset|bytesstart|bytest|bytestext|bytestobigint|bytestoprimefieldelement|bytestorage|bytestream|bytestreams|bytestrraw|bytesymbol|bytevec|bytevector_copy_new|bytevector_copy_new_definition|bytevector_definition|bytevector_test|bytevectorv|byteview|byteviewbacking|bytewise|byuse)$";
    let re = Regex::new(pattern).unwrap();
    re.is_match(text)
}
