use regex::Regex;

pub fn matches_ht(text: &str) -> bool {
    let pattern = r"^(ht9krplvto3rr5wzqbqfrbqws8sbyscxfnt8evuobbom|htbottom|htbottomleft|htbottomright|htcaption|htclient|htclose|hte|htestˇjkl|htleft|htmaxbutton|htmd|htminbutton|html401|html_attrs|html_canvas|html_cleaned|html_code_snippets|html_comment|html_config|html_file|html_id|html_lang|html_language|html_mime_is_correct|html_playground_url|html_ref|html_root|html_str|html_table|html_text|html_tmpl|html_tool|html_types|html_url|html_with_session|htmlanchorelement|htmlblock|htmlcanvaselement|htmldoc|htmledition|htmlendtag|htmlescape|htmlextension|htmlimageelement|htmlsimplifier|htmlstarttag|htmltemplate|htmltomarkdown|htmlwhitespacesensitivity|htmlˇ|htnowhere|htotal|htp6jjhfpzxe7dnjwdldvutb7feurnuchcijcj0lcnllxwdwch3nxhwn4euud212h1tttvysjqdilpdlfqo8dxa9zxdq4zmok1gitpbyaseiqowfy1qrswmvooexxl1vlgym9o6zgkeeeg1flnotohpxkeykywpq1qq2iut6e8hy6uk8ehcee9d2nnake1cahor0yp5c5uvlg2sni91cnrukbtlxr|htqs1ch3nsuhmnlpenj5w6khzfwtf3mzcn1mtqk7lkb7|htright|httgmrumyrzentyl3edcddns6e4d5wrq1fa7kqsb66qq|httop|httopleft|httopright|http09_responses|http1_allow_obsolete_multiline_headers_in_responses|http1_allow_spaces_after_header_name_in_responses|http1_ignore_invalid_headers_in_responses|http1_max_buf_size|http1_max_headers|http1_only|http1_preserve_header_case|http1_read_buf_exact_size|http1_read_exact_buf_size|http1_server|http1_title_case_headers|http1_writev|http1requesttarget|http2_adaptive_window|http2_client|http2_connection_window_size|http2_frame_size|http2_initial_connection_window_size|http2_initial_max_send_streams|http2_initial_stream_window_size|http2_keep_alive_interval|http2_keep_alive_timeout|http2_keep_alive_while_idle|http2_max_concurrent_reset_streams|http2_max_frame_size|http2_max_header_list_size|http2_max_pending_accept_reset_streams|http2_max_send_buf_size|http2_server|http2_stream_window_size|http_|http_10|http_api_not_noop|http_auth|http_auth_offered|http_connect|http_connection_manager|http_err|http_error|http_failure|http_filters|http_handler|http_method_str|http_mock_service_worker|http_non_standard_port_included|http_or_https_proxy|http_port_80|http_port_8080|http_port_8080_rewrite|http_port_80_omitted|http_port_80_rewrite|http_proxy_config|http_request_api|http_request_count|http_request_custom|http_request_stream_callback|http_request_stream_callback_custom|http_request_update|http_request_update_custom|http_requests_duration_seconds|http_requests_total|http_requires_trailing_slash|http_route|http_rpc|http_rule|http_sender_on_tokio_current_thread|http_sender_on_tokio_multi_thread|http_timeout|http_timeout_secs|http_transport|http_version_override|httpapi|httpauth|httpauthsecurityscheme|httpbinary|httpcallresponsebody|httpcallresponseheaders|httpclientwithproxy|httpconnectionmanager|httpconnectorfuture|httpconnectorsettings|httpdate|httpheaders|httpmock|httponly|httporhttps|httpproxyauthorization|httpproxytype|httprequestapi|httprequestbody|httprequestbuilder|httprequestext|httprequestheaders|httprequeststreamingcallback|httprequeststreamingcallbackany|httpresponsebody|httpresponseerror|httpresponsestream|httproute|httprpcerror|httprule|https_connect|https_connector|https_non_standard_port_included|https_or_http|https_port|https_port_443|https_port_443_omitted|https_port_443_rewrite|https_port_8443|https_port_8443_rewrite|https_proxy_config|https_scheme|https_signed_call|https_signed_rpc_raw|https_something_happens|httpsconnectorbuilder|httpsend|httpserverhandle|httpstatuscodeclassifier|httptrailers|httpupdaterequest|httpversion|htw2psyertj4bv6kbm9nz9vbujvxt7sacnwcf76wtzb3)$";
    let re = Regex::new(pattern).unwrap();
    re.is_match(text)
}
