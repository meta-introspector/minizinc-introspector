// This file is automatically generated by the Gemini CLI.
// It contains named character constants for "kantspel" transformation.

// Basic ASCII and common programming characters

pub const OPEN_SQUARE_BRACKET: char = '[';
pub const CLOSE_SQUARE_BRACKET: char = ']';
pub const OPEN_PARENTHESIS: char = '(';
pub const CLOSE_PARENTHESIS: char = ')';
pub const COLON: char = ':';
pub const SEMICOLON: char = ';';
pub const COMMA: char = ',';
pub const DOT: char = '.';
pub const EQUALS: char = '=';
pub const PLUS: char = '+';
pub const MINUS: char = '-';
pub const ASTERISK: char = '*';
pub const SLASH: char = '/';
pub const PERCENT: char = '%';
pub const AMPERSAND: char = '&';
pub const PIPE: char = '|';
pub const CARET: char = '^';
pub const TILDE: char = '~';
pub const EXCLAMATION: char = '!';
pub const QUESTION_MARK: char = '?';
pub const AT_SIGN: char = '@';
pub const HASH: char = '#';
pub const DOLLAR_SIGN: char = '$';
pub const UNDERSCORE: char = '_';
pub const HYPHEN: char = '-';
pub const GREATER_THAN: char = '>';
pub const LESS_THAN: char = '<';
pub const QUOTE_SINGLE: char = '\'';
pub const QUOTE_DOUBLE: char = '"';
pub const BACKTICK: char = '`';
pub const NEWLINE: char = '\n';
pub const CARRIAGE_RETURN: char = '\r';
pub const TAB: char = '\t';
pub const SPACE: char = ' ';
pub const NULL_CHAR: char = '\0';

// Common multi-character operators/delimiters
pub const DOUBLE_COLON: &str = "::";
pub const ARROW_RIGHT: &str = "->";
pub const DOUBLE_EQUALS: &str = "==";
pub const NOT_EQUALS: &str = "!=";
pub const GREATER_THAN_OR_EQUAL: &str = ">=";
pub const LESS_THAN_OR_EQUAL: &str = "<= ";
pub const LOGICAL_AND: &str = "&&";
pub const LOGICAL_OR: &str = "||";
pub const FAT_ARROW: &str = "=>";
pub const PLUS_EQUALS: &str = "+=";
pub const MINUS_EQUALS: &str = "-=";
pub const ASTERISK_EQUALS: &str = "*=";
pub const SLASH_EQUALS: &str = "/=";
pub const PERCENT_EQUALS: &str = "%=";
pub const AMPERSAND_EQUALS: &str = "&=";
pub const PIPE_EQUALS: &str = "|=";
pub const CARET_EQUALS: &str = "^=";
pub const SHIFT_LEFT: &str = "<<";
pub const SHIFT_RIGHT: &str = ">>";
pub const TRIPLE_DOT: &str = "...";
pub const DOUBLE_DOT: &str = "..";

// MiniZinc specific
pub const FORALL_KEYWORD: &str = "forall";
pub const EXISTS_KEYWORD: &str = "exists";
pub const IMPLIES_KEYWORD: &str = "->"; // MiniZinc implies
pub const SOLVE_KEYWORD: &str = "solve";
pub const VAR_KEYWORD: &str = "var";
pub const INT_KEYWORD: &str = "int";
pub const BOOL_KEYWORD: &str = "bool";
pub const FLOAT_KEYWORD: &str = "float";
pub const SET_KEYWORD: &str = "set";
pub const ARRAY_KEYWORD: &str = "array";
pub const OF_KEYWORD: &str = "of";
pub const PREDICATE_KEYWORD: &str = "predicate";
pub const FUNCTION_KEYWORD: &str = "function";
pub const CONSTRAINT_KEYWORD: &str = "constraint";
pub const ANNOTATION_KEYWORD: &str = "annotation";
pub const INCLUDE_KEYWORD: &str = "include";
pub const OUTPUT_KEYWORD: &str = "output";
pub const SATISFY_KEYWORD: &str = "satisfy";
pub const MINIMIZE_KEYWORD: &str = "minimize";
pub const MAXIMIZE_KEYWORD: &str = "maximize";

// Common Unicode symbols (relevant to math, logic, or general text)
pub const LAMBDA_SYMBOL: char = 'λ';
pub const FOR_ALL_SYMBOL: char = '∀';
pub const EXISTS_SYMBOL: char = '∃';
pub const NOT_SYMBOL: char = '¬';
pub const AND_SYMBOL: char = '∧';
pub const OR_SYMBOL: char = '∨';
pub const IMPLIES_SYMBOL: char = '⇒';
pub const EQUIVALENCE_SYMBOL: char = '⇔';
pub const ELEMENT_OF_SYMBOL: char = '∈';
pub const SUBSET_SYMBOL: char = '⊆';
pub const SUPERSET_SYMBOL: char = '⊇';
pub const EMPTY_SET_SYMBOL: char = '∅';
pub const INTERSECTION_SYMBOL: char = '∩';
pub const UNION_SYMBOL: char = '∪';
pub const INTEGRAL_SYMBOL: char = '∫';
pub const SUMMATION_SYMBOL: char = '∑';
pub const PRODUCT_SYMBOL: char = '∏';
pub const INFINITY_SYMBOL: char = '∞';
pub const PARTIAL_DIFFERENTIAL_SYMBOL: char = '∂';
pub const NABLA_SYMBOL: char = '∇';
pub const APPROXIMATELY_EQUAL_SYMBOL: char = '≈';
pub const IDENTICALLY_EQUAL_SYMBOL: char = '≡';
pub const PLUS_MINUS_SYMBOL: char = '±';
pub const MULTIPLICATION_SYMBOL: char = '×';
pub const DIVISION_SYMBOL: char = '÷';
pub const SQUARE_ROOT_SYMBOL: char = '√';
pub const DEGREE_SIGN_SYMBOL: char = '°';
pub const MICRO_SIGN_SYMBOL: char = 'µ';
pub const THEREFORE_SYMBOL: char = '∴';
pub const BECAUSE_SYMBOL: char = '∵';
pub const ELLIPSIS_SYMBOL: char = '…';
pub const BULLET_SYMBOL: char = '•';
pub const COPYRIGHT_SYMBOL: char = '©';
pub const REGISTERED_TRADEMARK_SYMBOL: char = '®';
pub const TRADEMARK_SYMBOL: char = '™';
pub const EURO_SIGN_SYMBOL: char = '€';
pub const POUND_SIGN_SYMBOL: char = '£';
pub const YEN_SIGN_SYMBOL: char = '¥';
pub const CENT_SIGN_SYMBOL: char = '¢';
pub const SECTION_SIGN_SYMBOL: char = '§';
pub const PILCROW_SIGN_SYMBOL: char = '¶';
pub const DAGGER_SYMBOL: char = '†';
pub const DOUBLE_DAGGER_SYMBOL: char = '‡';
pub const PRIME_SYMBOL: char = '′';
pub const DOUBLE_PRIME_SYMBOL: char = '″';
pub const TRIPLE_PRIME_SYMBOL: char = '‴';
pub const ANGLE_SYMBOL: char = '∠';
pub const PERPENDICULAR_SYMBOL: char = '⊥';
pub const PARALLEL_SYMBOL: char = '∥';
pub const NOT_ELEMENT_OF_SYMBOL: char = '∉';
pub const PROPORTIONAL_TO_SYMBOL: char = '∝';
pub const CUBE_ROOT_SYMBOL: char = '∛';
pub const FOURTH_ROOT_SYMBOL: char = '∜';
pub const PER_MILLE_SIGN_SYMBOL: char = '‰';

