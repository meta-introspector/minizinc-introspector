use regex::Regex;

pub fn matches_n_(text: &str) -> bool {
    let pattern = r"^(n_|n_0|n_1|n_100|n_277|n__|n___|n_arguments|n_arms|n_attached_trivias|n_attn_heads|n_audio_ctx|n_audio_head|n_audio_layer|n_audio_state|n_availability|n_axes|n_axis|n_bar1|n_blobs|n_block_out_channels|n_bottleneck_blocks|n_callbacks|n_candidates|n_cases|n_cb|n_cfg_overrides|n_changed|n_chars|n_choice|n_chunk|n_chunks|n_class|n_clients|n_clusters_cannot_be_zero|n_cm|n_codebooks|n_cols|n_commas|n_concurrent_builds|n_cor|n_crops|n_crops_per_side|n_cursor|n_cursors|n_details|n_dicts|n_dimensions|n_documents|n_done|n_elements_0|n_elems|n_embd_gqa|n_entries|n_expert|n_expert_used|n_exprs|n_extra_includes|n_fft|n_file_sets|n_fill_none|n_filled|n_filters|n_fn|n_fp|n_gate|n_gotos|n_gpus|n_gram_max|n_gram_min|n_gram_range|n_grams|n_group|n_h|n_hidden|n_i|n_id|n_ids|n_idx|n_idx_str|n_index|n_init|n_input_token_mask|n_input_token_shift|n_key_value_head|n_labels|n_leafs|n_len|n_local_heads|n_mel|n_mem|n_mlp|n_models|n_monitors|n_msg|n_n|n_name|n_needed|n_needed_derefs|n_no_improvement|n_nuple|n_obs|n_outputs|n_parts|n_patch|n_per_block|n_per_side|n_percent_step_iterator|n_ptr|n_q|n_read|n_receiver_refs|n_refs|n_rels|n_required_params|n_residual_layers|n_resnets|n_results|n_rounds|n_routed_experts|n_row_0|n_row_1|n_rows|n_rows_i|n_runs_cannot_be_zero|n_rustc_cfg|n_rustc_compiler_crates|n_samples_per_cluster|n_segments|n_shared_experts|n_size|n_slots|n_snodes|n_spaces_after_line_break|n_sqrt|n_src_refs|n_state|n_states|n_symbols|n_sys|n_sysroot_crates|n_t|n_target_refs|n_text_ctx|n_text_head|n_text_layer|n_text_state|n_thr_per_group|n_three|n_ticks|n_tn|n_tp|n_trivias|n_tt|n_types|n_uncovered_patterns|n_unique|n_unique_with_impl_dups|n_unsaved|n_val|n_w|n_wa_pattern|n_words)$";
    let re = Regex::new(pattern).unwrap();
    re.is_match(text)
}
