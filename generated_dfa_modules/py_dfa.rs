use regex::Regex;

pub fn matches_py(text: &str) -> bool {
    let pattern = r"^(py03|py3|py_|py_0|py_2p5|py_6|py_8|py_bytes|py_dict|py_event|py_file|py_indexer|py_lsp_adapter|py_neg_px|py_node|py_rule|pybool|pybuffer|pybytes|pybytesmethods|pyc|pycodestyle|pycompat|pydevice|pydict_to_metadata|pydictmethods|pydtype|pyenv_dir|pyenvvirtualenv|pyevent|pyfloat|pygame|pygmaeus|pyi|pyint|pyjama|pyke|pykeyerror|pylangerr|pylint|pylistmethods|pyloudnorm|pylsp|pylsp_bin|pylsp_mypy|pylsp_path|pylspadapter|pymetadata|pyo3_build_config|pyo4|pyobject_to_gguf_value|pyonnxmodel|pyonnxtensordescriptor|pyproject_toml|pyprojecttomlmanifestprovider|pyqtensor|pyramid|pyrenees|pyright|pyright_bin|pyrightconfig|pyrossh|pyshape|pyshapewithhole|pyslice|pystr|pystring|pytensor|pytest_class_name|pytest_method_name|pytest_target_str|pytestmark|pyth|python2|python_activate_command|python_active_toolchain_path|python_active_toolchain_path_raw|python_active_zed_toolchain|python_active_zed_toolchain_raw|python_command|python_context_provider|python_data_dir|python_env_kind_display|python_environment|python_extract_path_and_line|python_file_line_matcher|python_file_line_regex|python_invalid|python_lang|python_lsp_adapter|python_match|python_module_name|python_module_name_from_relative_path|python_module_name_task_variable|python_operator|python_operators|python_prefix|python_runner|python_sample|python_script|python_settings|python_snippet|python_spec|python_test_target|python_test_target_task_variable|python_toolchain_provider|python_valid|python_venv_activate_command|python_venv_base|pythonargs|pythoncdk|pythoncontextprovider|pythonenvironmentkind|pythonhome|pythonlspadapter|pythonoperatorconfig|pythonsettings|pythonsourcedef|pythontoolchainprovider|pythonunbuffered|pytracebackmethods|pytypeerror|pyvenv|pyw|pywithdtype)$";
    let re = Regex::new(pattern).unwrap();
    re.is_match(text)
}
