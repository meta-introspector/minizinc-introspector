MiniZinc 2
=========================

Installation Instructions
-------------------------

These instructions are for compiling and installing MiniZinc 2 from the
source distribution.

MiniZinc 2 is based on the libminizinc C++ library. In order
to compile and install libminizinc you will need the following
software:

Compilation instructions:
-------------------------

Prerequisite software:
- cmake, ZLIB (on some platforms)
- A recent C++ compiler, libminizinc has been tested with recent versions of
  clang, g++, and Microsoft Visual C++.
- If you intend to change lexer/parser templates or checkout development
  snapshots, the bison and flex parser/lexer generators. These usually come
  packaged for Linux distributions, and they are part of the Xcode developer
  tools for Mac OS. On Windows, simplest is to have MinGW(64) tools on the
  path, or use winFlexBison.

Download the source code from the git repository or uncompress a source
archive. Then change into the toplevel directory (the one containing this file).

To perform the build:
```bash
mkdir build
cd build/
cmake ..
cmake --build .
```

CMake configuration will try to find Gecode, CBC, SCIP, Gurobi, XPRESS,
and CPLEX in their standard locations (see Documentation on how to compile
open-source solvers). You can point to alternative locations using flags such as
-DGECODE_ROOT=... with the configuration call `cmake ..`. Standard environment
variables, such as GUROBI_HOME, are checked as well. See CMakeLists.txt for the
current list of solvers.

This will compile the minizinc driver with the available solvers. To configure
even more solvers, such as Chuffed or Google OR-Tools, see Solver Configuration
in Documentation.

To install MiniZinc:

```bash
cmake --build . --target install
```

This will install MiniZinc in the standard location for you system. In order
to change the installation prefix, invoke cmake as follows before invoking
cmake --build:

```bash
cmake -DCMAKE_INSTALL_PREFIX:PATH=<where you want to install> ..
```

Running
-------

The build produces the mzn2fzn and
solns2out tools. These are drop-in replacements for the MiniZinc 1.6 versions.

Add the bin directory in the installation path to your PATH environment variable
if necessary, or (if you did not install) add the "build" directory to your PATH.

If you have both MiniZinc 1.6 and 2 installed (and MiniZinc 2.0
occurs on the PATH before 1.6), you can use the old minizinc driver
with the new versions of mzn2fzn and solns2out.

Useful options: -v to print progress log and -s for solution statistics.
Most targets support -a for continuous printing of new solutions.
Run minizinc -h <solver> for more information.


Compilation instructions for emscripten:
----------------------------------------
Prerequisite software:
- cmake
- emscripten sdk

As an alternative a Docker Image can be used by prepending: `docker run --rm -it -v ${pwd}:/src trzeci/emscripten bash`

```bash
mkdir build
cd build/
cmake .. -DCMAKE_TOOLCHAIN_FILE=/emsdk_portable/sdk/cmake/Modules/Platform/Emscripten.cmake -DCMAKE_BUILD_TYPE=Debug
cmake --build .
```
